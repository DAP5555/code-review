The function returns 'newRwoTypes' and after your change it might not be distinct anymore, this changes the behaviour of the code
Count on IEnumerable<T> is risky, you never know whats behind it, theoretically it could be a slow linq statement. Setting the capcaity isnt bad but here you never know how many fields are configured, you migt not have any at all while still creating a big list. This increases performance for some case while it decreases for other
For .NET8 you always need a process starting info here.So that I don't have to fix this on 7.2.1, please add directly :)
New public method, which should also be commented on. "Tries to remap the index if the column name has changed"
I am with something like that for IREADONLYLIST.With an IREADONLYCOLLECTIO, I rather expect that a hashset or something can also be behind.  Edit: Ok, in the implementation it is also a dictioanry behind it and the order of the columns doesn't really matter, so Collection fits :) These are the value from the dictonary.Nothing should be twice in there Here is the same with the IREADONLYCOLCONT
If necessary, also change to IREADONLYLIST or push such things until the PR is through and if necessary clean up again afterwards?
New public method, would like to have a comment "Creates Index Definitions for the Table Based On The Column Definitions. Does Not Check IF Index Already Exists in Index Collection"
Repository geometrymodelype.lovion geometry is never set here again. I still adapt to
It should be checked whether a roll-rwo with the SID already exists so that the second execution does not occur a mistake that breaks down the whole process or later has problems because the SIDs are no longer clear.
The private is still missing here: False.The PSC should also have complained. It thought about it, made something different and of course forgot.You are completely right
Can you use the constant instead? That's right, I was so temporarily in it.Street_key is not included with the configurable constants, but I once added it as a resource.
What do you think of iobjectwithlocalizedvalues?  Edit: Oh, the interface was now supplemented for a class that was previously existed.Then that with iobjectwithlocalizedvalues ‚Äã‚Äãas a supplement to new developments that something like that may be used. Yes, I try to take myself to heart in the future. The order of the points is important, isn't it?In the implementing class, it is also arrays.So I would do IREADONLYLIST here on the interface.IREADONLYCOLLECTION could also be a hashset and then the order would be flute I changed even though your argument is not conclusive.An IREADONLYCOLLECTION and an IENUMERABLE also return your elements in a certain order.With iREADONLYLIST, it can also access an index, hopefully performerant via an index.
If the order is also important here, then also IREADONLYLIST so. Is not new, so only a (definitely conscious anyway) indication that only IREADONLY stuff will be enough out on the outside, so that nobody can change your internal structures from the outside. Yes, here I only added the comment.  That would be IREADONLYDICTIONARY, but with this PR I didn't want to make the complete network tracking perfect.
Please move to the associated module.See https://confluence.its-service.de/display/lkb/lvndm-datei
LovionConnect and LovionConnectap are part of the Lovionbis delivery.Do they have to be delivered from this? Yes, since the customer used Odataconnect for orders and Timesheet
Here the simple interface (Irwoguifunctional Presenter is sufficient if you do not implement the RWOS Property
Comments? Do you have to calculate all Targettrwotypes in advance?Of course, you have to take out the reference fields that do not lead to concrete RWOT> YPEN.But the rest you can do "on-the-fly", right? If I already calculate the data in the constructor, theoretically time can be saved in the UI-Thread, since the presenter can also be created in a different thread.At least that was the intention. At the last moment I try to switch to the Valuedisplaypairs (only in the (Get) Property for the Binding from the GUI).This can save yourself these detours and increase readability. Let the point talk about the point here, if it falls away you can do it that way.
If the presenter does not fit, there can actually be a hard crash
It is better (safer) to take the RWO's change set instead of relying on the ExecutionContext.
Patterns: So far "Executedwithresult", here: "Executed" although a result (RWOS) is returned. But you mean at the Create, right?Delete gives back featureresulteout.Empty
The line is already in line 49?
You try to remove the file reference from the dictionary _stylemapping providerimage tource.But is that always the right dictionary?If this cannot be ensured, I would rather do without removal at the point or always do it right. If Value is no longer needed, you can write like this: _stylemappingProviderimagesource.tryremove (rwoprovider.ID, out _);
Intuitively I would have the "parameter" and then the "value".So around exactly.But only as a note, can "n√§" write on it I also thought about it, but then did it differently :) This will then be a list of zero or empty strings (-: Better than nothing I am: D If you are already on, then you can also make a hashset from "Authorizedfields" n√§ Sad but not worse than before, so my hands are bound to me :) Instead of any () and then where () the app () can simply leave out and simply directly add (blab club.where (...)) No desire for microoptimizations for the error :) This is not just microoptimization, but simply generally false/superfluous patterns, which you should get used to üßô‚Äç‚ôÇÔ∏è Such things have been in total or in the wrong places often enough relevant performance problems Spaces after a comma in the join is missing fixed
We should pack this here as a method and also insert it with CopyfroLDERWITHBACKUP.Since old files still exist, we should change logic a bit anyway.Best call me later ‚úåÔ∏è
That can be a check.So check whether the origin path ends on .zip and if so, then create a FileinFo, otherwise a direct cardryinfo.As it is now, you may only generate a directoryinfo object, which will be replaced immediately afterwards when it is a ZIP file
As I said, it can be problematic if the ZIP file has only been generated more than 30 minutes after the launcher has been created.Then the check would always deliver true and at every start it would be recognized that there is a new launcher, but this is not the case.  The test with the times from the ZIP file was not successful?
Would always go over the GetaWaiter () with a task
Doesn't it usually take local as a namespace? This should actually not be the case, is corrected.
Is the cursor not controlled via dragventargs.eaffects? According to the Internet and everything else.But it didn't work here. And it can't stay on NO either?Somehow I miss such a reset but probably something else is done by something else I have now switched this to drag event coffin.  It didn't work yesterday !!!  But now it didn't work with the setcursor at once !!!
We usually don't use that deep namespaces. Thanks for the tip.I didn't know that.In the plugin, I have so far according to the .NET specifications.To keep uniform (at most in the plugin) I would keep it here.Is that i.O.? Yes, that's the way it is. But there is not what the class does, but only how. In general, I would assume that any WCF things happen here.In fact, only some paths are viewed. Bool instead of boolean The method name does not reveal what happens here.As an out parameter, I would expect any information.Instead, a new path comes, at least according to the name.
Paremeter validation is missing.
We avoid "alpha" releases if it is somehow.Is there a reason to go on alpha here? Code removed and https://jira.its-service.de/browse/lpd-67984 for later
Helper classes are usually static. I don't think that's easy here.I am currently creating the help of the helpers in the Otel Service and giving him the LWAS settings.Then I put the instance in the .NET DEPENDENCY injection.In the middleware I can then get it via DI and then have the necessary LWAS settings (simply worth the paths and folders as a string) then in the help of the helper.I don't have the LWAS settings in the middleware and for performance and stability reasons I would also be as little lovion things as possible.Does that make sense üòÑ? Please no random optimizations in 721, that only causes us problems with merges and we don't gain anything with it.
The line here can be arranged according to https://jira.its-service.de/browse/lpd-62469
The changes in this file could be as an `option.loggerFactory = loggerFactory.Create (logging => logging.addprovider (new grpclogger.loggerprovider ()));` Yes, but I don't like that.Is uncomfortable to debugg.
That doesn't belong here right?
This line should only come after the zero check üëçDone
Here the zero check should be made on the attribute.If zero is added to the Fileinfo, then an exception flies, i.e. check beforehand. I have now adjusted as here.Is that OK ?  `` Charp if (string.isnullorwhitespace (project element.attribute (xml_attr_path) .tostring ())) { throw new argumentexception ("Path must not be zero or Whitespace"); }  Return New ProjectConfiguration ( FileSystem.Fileinfo (ProjecTelement.attribute (xml_attr_path) .value) ); In order not to query the attribute twice, you can do that before.Since the attribute is mandatory according to the scheme, at least the attribute must be there, but it could contain an empty string.  var pathvalue = project element.attribute (xml_attr_path) .value; if (string.isnullorwhitespace (Pathvalueee)) throw new argumentexception ($ "'{xml_attr_path}' must not be null or whitespace");  Return New ProjectConfiguration (FileSystem.Fileinfo (Pathvalue)));  OK.As we have just seen, Fileinfo is not created when an empty string is handed over.So I first create IFileinfo Path and check whether it is zero or not.For example like this:  `` Charp IFileinfo Path = FileSystem.Fileinfo (project element.attribute (xml_attr_path) .value);  if (path == zero) { throw new argumentexception ($ "{nameof (path)} cannot be zero"); }  Return New ProjectConfiguration (Path); You have to check the value of the attribute before creating a new Fileinfo object.If you put an empty string in when creating the Fileinfo-Obenjkt, an exception flies and you never come to the line where you could check Path == zero.Therefore only check the string and when the OK is, then create the FileinFo.  And also use the constant XML_ATTR_Path and not name (Path) in the message.It's about the name of the attribute.Which is also "path", but that's exactly what the constant is for :)
As already mentioned above, the check for NullorWhiteSpace on the full name is superfluous.But maybe try it out.But believe that such an object cannot be created at all, where the full name Empty or only Whitespace is üëçDone
The file system should not be stored here ok i took it out
Why does Maui count? Maybe you could use Searchvalues ‚Äã‚Äãhere. But probably don't bring that much.
Why is that just not ready? And the beautiful comments :( Why are they all writing now? Rip comments :( That is because of the bind.Otherwise it doesn't work. Too bad.The JSON Deserializer can mean that in principle I think that is because he can reload the file at runtime and then updates the object via the setter (but is only my guess).
Pack the namespace in the Using It does not work.Microsoft has now also introduced IFileinfo for Kestrel ...
Can that be zero? Yes.
Do we want to check that until the release?If necessary, ticket and more information? A good idea: https://jira.its-service.de/browse/lpd-67552
There is the extension method tryget measurement board () on Iplugin.In the end it makes the same
For the message board, maybe the first thing that was generally like "error in the execution of a diagnostic engine XY for feature z".As a second parameter then E.Mesasge and as the third parameter, add the exception?The messageboard then does it alone with the stack trace and possibly existing inner exceptions
Can you Dutch or Google Translate?:-) We only make German and English and the rest is translated externally and re-recorded. I remember that there was still a resource that was very similar and then I had derived it and checked again online.
The old project branding could be completely removed, it no longer works.(Only if you have time for it)
I think the search pattern must be configurable: - For your CSS branding you need the `*.css` files - I would not like to search all `*.cs' files for my productivation branding, but only`*plugin.cs` files.  For this, IMHO should be provided with a `filesarchpattern` attributes in the` codebranding`.(If you mean, then optionally with Fallback `*.cs`, but actually rather not optional). For your CSS_BRANDING it would even be considered whether the Filese arch pattern is not better even in Eimen.should be a superordinate day, i.e. proposal for a look of the configuration.xml: `` `XML <Codebranding filesarchpattern = "*. CSS"> <Replacement Original = "XYZ" Branded = "ABC" /> <Replacement original = "123" branded = "987" /> </codebranding> `` `
The configuration terroric sexception doesn't fly here anymore, right? That's right, I removed. Here you can also hand over the string to be searched and go over the keys Better readable, less code, faster I adjusted. Would always make Typeof (x). Assembly I adjusted.
Too many empty lines :) I removed.
The icon has to be moved because it is located in Lovion -internal featureplugin, which is not delivered
We could only load them once when starting up and then always returning the cached answer But that is user -specific ... Argh - Ok, I didn't think about it.
There is a field company that you should use This is not done here That's right, that's old code, I forgot to delete it. (Taskwork) Use constant Should that start with small letters? Yes, that is the current HTML that I copied from the browser. This is also the case here: https://gitea.its-service.de/lovion-demomodel-2016/src/commit/3b7280cac0917886cfe22ce8fc5f0bc/config_bis/task_Work/Repositories/base/enumerations.xml
also write here (.net standard 2.0 library)
This can get out.
The same resources are also used in other areas.The resources should be central and used by both plugins
In the method there are many German and narrow mixed texts.Can't you map this through resources? Is "Division" a project-specific RWotype? Yes, at some point Dominik gave me an idea that it would be nicer if the information could also be displayed in the outage, the division it concerns.It is currently only written specifically for outage.At least I can improve that as a const. This case and the case in line 287 can be summarized Can the "Feature_ID" be defined by Consts?
There is a generic extension method method. GetCusMattributes <Derivedfieldependencyattribute> () You get a Getyptes enumerable and zero is never I don't quite understand what you mean by that.Do I use this method?Without the cast, I would only get an object [].I don't really see anything here that is wrong. Isn't that blue warning that a cast will happen there? It can be.I have not installed this extension or not activated.I changed it.
Here is `Distribution =" 2 "Customerid =" SWKN "`
Exceptationhelper.Createmessagetext () This creates a message from the exception and all internal exceptions including stack trace.  If stacktrace should not be relevant or only in the log, but not in the GUI, then there is still creative text.But better the full for logging out. This is an interesting hint.But I find an entire stack trace in the popup inappropriate.And the logger writes the stack trace out, as it is called up here.In any case, I understood the Apache Log4Net documentary.
The exception helicopter can also be used here for logging out.And the messageboard itself should also be able to cope with the inner exceptions independently, isn't it? I checked: The logger also spends the stack trace when the error edition is called up with a description and exception.I rebuilt it accordingly.
Comment for the benefit of the activation
At least the reference to lovion.xaml can probably be out, that shouldn't be needed :) Is right
"... could be suitable ..."  So a "ne" too much and a comma too little. Ne ne ;-)  By the way, the comma is optional according to current rules.But I find Komata helpful.So I would be happy to meet your wish. "... Valueexchangeservice 'Komma' The ..." and "Valueexchangeservice" in the back of the sentence with large V
Comment can remain in it, but the combined measurement board can then get out Can get out completely.Comes in with 7.1.1, including the message on the message board. Is this a separate bugfix? No.This is necessary, because otherwise the `& lt;` and the corresponding are not yet dissolved and the test then complained about the semicolon in the expression.
The same is the same here as with IACTIVITY.
Comment is missing.
Comments are missing.
Comment? Comment on?
Comment
Report manager is not used. Throw meaningful exception.
Throw meaningful exception.
Contructor is over. Throw meaningful exception.
Comment
Comments
Comments
Comments
Comments
Is it intended to generate instances from this class?Otherwise abstract? ?. If the object has already been cleared, it happened to me every now and then that NR could happen here.This is how this is prevented.
? We have not yet fully implemented complex activities.Somehow it may look like it later, but I'm not that sure yet.
?.Operator necessary?
?.Operator necessary
A comment should probably also be added here so that it is easier to understand. There is probably no hash needed here.
Here should be in the comment that is given back. Initialization with source is unnecessary, or should it be returned in the case of false? Exactly if the XPath does not spend anything, the start should be returned
Why here "Nested"? Comments are still being processed?Something still missing?If necessary add "todo".
Something is missing on the interface, or why is it cast on Workflow? Gateways are currently not on the interface.But the question is whether it is necessary at all The IF is not required here. Comment permanently -> English If Canopeed, then result = false? If superfluous
Is that still todo?
What is missing on the interface? Why is the field called "Anytrue", would Can -Profeed be not more speaking? If is not needed.
That shouldn't really be possible.The field could actually be ready. I am currently not sure whether a situation cannot occur where the tanzition is not 100% correct.This query is probably really unnecessary. Why here?.  Can't actually happen. Could occur temporarily when developing until I had adjusted it.Now not: D
?.not necessary  In rare cases, it could happen that the object had already been cleared away and that had been waiting here.Serves to secure asynchronous errors Here is a dictionary?First -time fault if necessary, or otherwise a list in the long run The question here is how often you will really call this method.If it is only called twice, a dictionary might have some overhead.I would perhaps take a closer look later if we have more functions. Can there be the case that the attribute is not found?And wouldn't the processing then not have to be canceled? no longer after the validation works.Gave a time when it was unfortunately necessary
?.above Again again, asynchronous calls can occur that the object has already been cleared away.
I don't think you have to write the explicit delegate That should be onbackroundchanged or something
That makes no sense and yet runs into a zero reference exception
Please correct the indentation again Ok, I did.
Is also implicitly private, but for the purpose of uniformity private (readonly) write before :)  In other classes too
Delete, right?That never occurred ...
Doesn't the PSC complain here because of the conditioned code? The critical mass has definitely not yet been reached;)
** ‚ùìquestation (non-blocking): ** But this is used elsewhere? default-group.svg, default-team-edit.svg, default-team.svg, default user.svg (with and without "-active") and user.svg are also in lovion.comon, which was once so decided. ** ‚ùìQuest: ** But why is that the other prioicons under module here? High_priority and High_Priority_red are also here. But why? They are not used anywhere else.I moved them to Component.Workmanagement.
Why not use webnamedobject directly? I probably thought that there were more proprieties. But so you are flexible at least for the future;)
Still check for guireadable? I added Guireadable?
Can that be zero or deliver the False Trygetservice?For that is the case back service The service is declared as an optional service in all plugins that have been changed.That's why you have to query him with TrygetService.The "false" is not evaluated at all, it is only ensured that it is only queried once.The local var.Yes too.
Is that a prerequisite for the fix? At least that has improved it.With Cachelength 5, as with the 711 ticket, the problem has occurred much more frequently. Then the number of objects generated should be kept in mind, which may be generated by the enlargement cache.
Why do you need this check for?_Overlay Presenter == Presenter Before that, there was the problem here that every dialog was closed.As a result, the test case implementation window was specifically closed when a feature closed dialog has called (for us this noticed when the type of fault "gas smell" is set. This automatically creates a questionnaire; the method for this has then closed our testing window.)
Representation - that still has to be clarified. Another solution is being sought
Isn't that _values? _Values ‚Äã‚Äãare the selected entries Then you should rename one of the two, right? > Then you should rename one of the two, right?  Done: I also irritated me
Wouldn't it be left in the release again? Done: In multiselection parameter adapter too
We still have to clarify. Another solution is being sought
We still have to clarify.
Who calls that up?Why don't we listen directly to the descriptor? This is called in the primitive presenter adapter.Line 211. If there is a change, everyone else will be informed
Instead of "2" Maybe "DataGrid" and the other "checklist" or something. done
Here too "?"helped. done
Was that a mistake?I cannot evaluate such a change here. That was the representation error in the SOC.
First evaluate the number and then create the feature parameters, otherwise all work may be done for free. Done: First calculate the number of filters and then create the parameters
"It was suitable ** en ** could comma integrity"
Do you need the regex?Isn't it generally about the code compiled at runtime? I forgot to mention.This is about a second issue.It should be prevented from inserting malt code in the LWAS.  https://jira.its-service.de/browse/lpd-64365 Myriam is still talking to Markus whether this breaking change in 7.1.1 really has to exist.
Apparently it doesn't work if you let go of the card.And even if another element catches the drop. We can probably never prevent, right? Hmm yes I actually thought that Mainwindow should be at the top in the hierarchy and would first be asked what should happen with a drop.So I was a little afraid that I was to pull the drop for other controls. Then maybe we'd better do it like this:  - drop to the tabitem bar at the top is allowed and has an effect (tab is either shifted or inserted from another Mainwindow)  - If possible, a drag out of Lovion with letting go outside the window will be outsourced this tab into its own Window.  - A drop within the Mainwindow is otherwise ignored  Is probably more intuitive anyway.I would like to be able to generate a new window only via the right -click function.You do not believe how many use the right day to generate a link or re -load the tab, but have never perceived the function for outsourcing in another window: D "Show in a new window" can be selected on the rider.Wouldn't that be enough and we only do the move in the ribbon bar? > I would like to continue to be able to generate a new window only via the right -click function.You do not believe how many use the right day to generate a link or re -load the tab, but have never perceived the function for outsourcing in another window: D  It's so bulky.Would you have ever outsourced a tab in Chrome in a new window if you had to click on it (and would have to know this function first)? Much more elegant if you do this via drag & drop Yes, but on the map/grid/etc.I find it even more unintended: D No, read my comment again: D Every drop within the window that is not in the tabitem bar should no longer have any effect in the future.A drop on the card. A drag & drop that ends outside the Lovion window would outsource it to a new window.  I think that is the most intuitive.Please correct me. The part with the letting go within the Mainwindows is too complicated.Now it is the card that has it, if you continue testing there is definitely more.So I expand it. Ok, would fit me that way. I rebuilt it accordingly, have a look at what you think of it :) So that you don't have to go to this branch again every time, I have put the built binaries with the last stand here:  \\\\ SRV-Lovion Data \ Share \ Lewa \ Itsam-1615 That fits.I integrated your fork with me as a remote and checked out the branch anyway.It also works very well and quickly.  I read it again in peace, for me it is so I.O.
The controll here has had no effect in my test.It doesn't even appear because the entire surface is simply frozen.
Hire can simply be written if (Field is Ireferecefield Reffield) and save the cast later The fields are read twice per rwotype.This is not necessary. We somehow have to get the package references out here.I haven't found a solution to ad hoc today.Maybe we can discuss this again in our team or you would have to step into Lovion again.The problem is that fields from coupling packages also come in this list, but they are not necessarily mandatory.  Example float: On the process (Process), reference fields end up here that come from documents or logbook.This should not be in the basic installation. Maybe we can get something with the Isflexibleside () method on the Ireferecefield.You would have to take a closer look at that I would find "Editorconfigurations_Base_" better.To clearly show that this is our basic files. fd.external name == insertfield.Xternal name -> Here you should compare with the internal names I just received an exception:   `System. Invalidoperation Exception: 'The collection has been changed.The enumeration process may not be executed.'`  I assume that with "Page2.Remove (existingfield);"in line 476. fd.external name == Existingfield.External name -> Here you should compare with the internal names
Would put a "debug:" at the front here.
Of course here too
First fault is always such a code smell.Since it was done about the index anyway, I would do it that way (not tested)  for (int i = baseCollection.count-1; i> = 0; i--) { if (baseCollection [i] .theme == themepresenter.theme) BaseCollection.Removeat (i); }  I also tested with the new changes and it works properly, as desired.
The line too
The two lines are twice in the file
The line can then also go
kleiner typo "action"
Combined line can go away
What happens if Lovion.Startupapperpperpeperancelogger does not exist?
Why should that be cached?Is that called up so often?If the chashing is really necessary, please do not in a static variable.And how do you update the hashes here when the files have changed on the hard disk? And hereby return <Clienthashgrpc>. For a maximum of 2 entries, a list may be a little too much of a good thing.An array would also be enough here.The length should initially be placed on TargetFiles.Length and if the actual number is fixed with array.resize () to the final size.(S.A. Arrayhelper). That should be an array. `Foreach (Var Filepath` ...  Even better over the `target files` and then determine the FileinFo with` launcherdir.file (..) `. What is this line required for? Done ü§¶‚Äç‚ôÇÔ∏è Not required. Is that used anywhere?
That actually has to be singular?`Clienthashegc` The type contains only a hash üëçDone
The hashes should be calculated when the service starts and also be cached there. You can still summarize that in: `` ` if (_configuration.projectsettings.trygetfolder (launcher_update_dir, out idirectoryinfo launcherupdatesdir) && launchupdatesdir.exists ()) { clienthashesgrpc = launcherfileclienthashhelper.getClienthashes (launcher updatesdir); }  `` `
Can't you simplify the merging of the lists here?The output list already contains `clienthashesgrpc` objects? üëçDone
The keys typically always start small.Here something like `launcher updates' would probably fit better than key.It is best to check the name again against other entries.In addition, the name of the constant does not correspond to the other / specifications. üëçDone Please check again, you haven't done everything here Yes sorry :(. I have now called launcher_update_dir
If necessary only the directory in question may be handed over?
In the long term, comments would be missing here
In the long term, comments would also be missing here
Is not formatted here. I would also put both in a message."UpgradeFile Outside" Also saves the double check
Can you remove all the empty lines. done
Maybe a virtual Bool Property is enough here?
List as a property is dangerous.You can access add/remove from the outside I added a todo.
Shouldn't the setters private? I changed.
At Hashset and Dictionary, I would give StringComparer directly.Comes out the same but makes it clearer IMO I added everywhere.
What happens at zero VS false?Find nothing in the code There is no difference.Zero means that the configuration was not given, False means that it was specified, but is not "full".  If you are not in the "partial dump" mode, the attribute does not have to be specified.Default is false. Constant? possibly also a property for $ "db_ {region}"? I introduced a private property.
I would take ireadony lylist here We kept encountering that you then count (), any () I changed.
Wouldn't a culture or format still be included here? Cultureinfo.Variant culture added. Can you do something here with inum?I haven't used either  Possibly convert the whole thing as a switch anyway Elsewhere is code (from Dimitri?), A Switch is made about Type.Getypececode ().  I haven't used inmers yet.  I have some inhibitions to change something.  Wouldn't that be what you could do in the core and I just call a method?
Autoproperty This entire file is to be removed when Simon has clarified that we no longer need the special locator data models. See comments at the beginning of the file. So I didn't put any trouble in there. You can make a hashset with StringConer.ordinalignorecase here and then get the value out in a large -scale letter with Hashset <T> .trygetvalue.  I would go so far as you never really need to do the Proupper or Lower This entire file is to be removed when Simon has clarified that we no longer need the special locator data models. See comments at the beginning of the file. So I didn't put any trouble in there.
Generatedregex attribute This entire file is to be removed when Simon has clarified that we no longer need the special locator data models. See comments at the beginning of the file. So I didn't put any trouble in there.
Generatedregex This entire file is to be removed when Simon has clarified that we no longer need the special locator data models. See comments at the beginning of the file. So I didn't put any trouble in there. Generatedregex This entire file is to be removed when Simon has clarified that we no longer need the special locator data models. See comments at the beginning of the file. So I didn't put any trouble in there.
[Generatedregex (IgnoreCommands)] Private Static Partial Regex IgnoreCommandsregex (); This entire file is to be removed when Simon has clarified that we no longer need the special locator data models. See comments at the beginning of the file. So I didn't put any trouble in there.
IREADONLYLIST for the property This entire file is to be removed when Simon has clarified that we no longer need the special locator data models. See comments at the beginning of the file. So I didn't put any trouble in there.
Not implement deception sounds like forgetting Emergency supported? and possibly implement explicit Everywhere I replaced an emergency -dated one and made a lot of explicit.
Pattern Matching and also bracket on the Else I changed. Conditional Expression Changed. Containinsany or all of Fancy Seachvalues Containinsany does not seem to be a .NET standard.  I think it is quite efficient.
Can't they be both Static? Yes, changed.
You can also simply separate with a comma Changed.
Can it readonly? Changed.
would always be type (x). Assembly instead of getexecutingassembly Changed.
To be expected in the interface is a bit restrictive This is not a return, this is an input parameter.  Makes life easier in this case, not more difficult.  In an implementation, drinks () are called on it.
Emergency ded and explicit interface implementation I changed.
Emergency ded and explicit interface implementation I changed.
A tablel loader has tableader? The tableader might also be called tableload managers or something, which is the parent object with interesting information. The class should be Sealed so that the equals are safe  But I would do a readonly Struct anyway instead of class I did it Sealed.  At Readonly Struct, I am afraid to hide something. IEQUATable <IdtUple> implement and that with  Public Override Bool Equals (Object Object) => Equals (Objs Idtuble) I don't know about it.  Iquatable needs a Typparameter.  What would this be here? Actually always the guy even with iequatable Otherwise work more with a own iequality company I think I have now adjusted it as suggested.
Hashset can be changed from the outside IREADONLYSET? I changed.
Looks like 99% C&P as from Tableitternode Not quite, tabletame and spatial index fashion are different.  Now also that the IDSofupdates registered on the left is passed out.  So only 87% of the lines are the same.  In the spirit of Kiss I would rather leave it that way.
Hashset modifiable as a property I changed in IREADONLYSET.
0 It is unnecessary I think it's nice when you see all the initial values ‚Äã‚Äãin the constructor. But this is only implemented inconsistently. I would throw out in the sense of overcrowding uniformity. Ok ok, I took it out. Can't you take the string builder directly?There are also some optimizations on the database system I switched to string builders. The command must be overdraft facility I changed. dispose I changed. dispose I changed.
Invariant culture.Or why do you have to convert it to the string at all I changed it to convert.tostring (Values ‚Äã‚Äã[i], cultureinfo.variantCulture).  It must be compared to strings that are read from the CSV files.
the empty methods were also implemented as an explicit interface implementation I changed.
Explicit implementation possibly also specify directly in the interface as a standard implementation Is now explicit.  I like it if you can see all the implementations together.
Explicit implementation I changed.
Definitely here a bracket block drum too I changed.
you don't need to assign I know, but I find it helpful to become a contrast. Then I removed. You can simply put the reader in a using I changed. Throw in extra line with brackets drum I changed. Clamp According to me.
I would assume that this is over Ok, I removed your responsibility. The file system should also be in a USING I changed. Better arguments or something I made an emergency supported expression with a message.
The error is always on and is otherwise not checked  But actually the logging doesn't fit.The Trygetargtrwos is also false if there are simply no references but the field exists.That's not a mistake. That with the false has also been noticed elsewhere, and had also created a ticket that would have to be pulled  https://jira.its-service.de/browse/lpd-65218 I would put the explanation (no RWOs or field not available) in the message. Possibly also the RWO with provider ID and Urn with logs.  There is also no space in front of if I am actually against explanations when logging. If the behavior changes, something like this must also be adjusted and that in places that have nothing to do with functionality.  Urn and provider ID could help. We usually only log in So simply separated by point
would take 0 less
That just broken up, is it? Jap
Since this is not an official module, please make the following adjustments: "Lovion XML Connect" -> "XML Connector" Type "modules" -> Type = "Component" Status = "Ok" -> Status = "Experimental"
That should be a property.Probably readonly You had already written something like that on the last PR.  That comes with the next PR, you can already look at the Branch 7.2.1/Feature/LPD-66873 loader code.
It can get out completely I don't understand that - "Owningrwourn" is still used in the method? I had looked at that for empty array But that is a very terrible thing.First toarray (), then Tolist ().and drinks ();  Enumerator action is ideal.Or give a list or anything about something I added a todo because I have to rebuild a little more.
Shouldn't the option be out or should at least be optional?  Tuppaler variant creates new strings  Use equals with StringComparison.ordinalignorecase Making the option optional (Haha) is a good idea, I wrote a Todo in the source text.  The handling of the options is i.W.Still from Dimitri, I would like to clean up a little anyway.  I adjusted the string comparison. I would always take the small -written string and not the system.string as well as you write instead of int32 or long instead of int64 I changed. At some point throw something more special like emergency ded or disability surgery I changed after emergency ded.
With DataAccess it can get out of it? I do not understand that.  If I delete the project reference on Deltafilecopy, I can no longer call up the methods for creating manifesters. I meant in Dataaccess I removed DataAccess's reference to Deltafilecopy.
The public/internal is missing in many classes. Probably can do some of the public things? And zack, once plow everything completely :) I changed. The syntax with Get in a line sees very bad.Possibly carproperties? I have already carried out extensive changes in another branch with which only XML Data Dictioniaies are supported.  Therefore, I do not want to make extensive changes in this PR so as not to generate massive conflicts myself.  Can't I do that in a later PR?  I also don't want to put all the conversions in a PR, which will become unmistakable many changes.  In this PR I only wanted to remove the Golive methods.  We are also welcome to make a complete code view of the loader, but actually it would make more sense if I take care of what I already know myself.
The variables are still wrong and should not be directly accessible as a field I have already carried out extensive changes in another branch with which only XML Data Dictioniaies are supported.  Therefore, I do not want to make extensive changes in this PR so as not to generate massive conflicts myself.  Can't I do that in a later PR?  I also don't want to put all the conversions in a PR, which will become unmistakable many changes.  In this PR I only wanted to remove the Golive methods.  We are also welcome to make a complete code view of the loader, but actually it would make more sense if I take care of what I already know myself.
Probably not so relevant here, but short text what went wrong is always nice The exception can probably not occur.  I want to do that structurally even better, then it is no longer necessary. ".lr" -> DatabasySystemsQlite.default_extension  And an Lr.info is already there or where does it come from? Databasesystemsqlite.default_extension is now used.  The Lr.info is generated elsewhere.  I would like to improve it structurally, but I don't want to do everything at once.
Private is missing I have already carried out extensive changes in another branch with which only XML Data Dictioniaies are supported.  Therefore, I do not want to make extensive changes in this PR so as not to generate massive conflicts myself.  Can't I do that in a later PR?  I also don't want to put all the conversions in a PR, which will become unmistakable many changes.  In this PR I only wanted to remove the Golive methods.  We are also welcome to make a complete code view of the loader, but actually it would make more sense if I take care of what I already know myself. Internal Field and Property? I have already carried out extensive changes in another branch with which only XML Data Dictioniaies are supported.  Therefore, I do not want to make extensive changes in this PR so as not to generate massive conflicts myself.  Can't I do that in a later PR?  I also don't want to put all the conversions in a PR, which will become unmistakable many changes.  In this PR I only wanted to remove the Golive methods.  We are also welcome to make a complete code view of the loader, but actually it would make more sense if I take care of what I already know myself.
The globaletting parameter is then over Jo is true.I also overlooked a Builderror in the error message:/
I only adjusted the size of the button for F1 so that it fits F2
Maybe all the properties in an extra line.I also went through the grid.column = "3".
I don't understand the changes.Can they stay?
This is also unnecessary, isn't it?You don't have to install a method with the F1 button? How?F1 is a togglebutton, toglebutton_checked and toglebutton_unchecked are for checked and unchecked and are used in pool visualfeaturecontrol.xaml at the top The task was to expand the shortcut "F1" to expand a button.The template can be switched in the pool with the shortcut "F1".You don't need any extra methods for the shortcut "F1", why for the toggle button? Yes, that makes sense.I look at
@dominik.lebert I made the Public method.Is that OK? Jo, was just a reference to the method over it.
Here directly Count> 0, ANY () should also be a SonarQube message if you have count as an alternative
Proper the "Component Parent" in the property's name
The Thisasfield Presitor can actually get away and just access Compparent -Presenter directly
** ü™∂ Typo (non-blocking): ** non-transparent (s too much into) fixed
Boah, Fancy Shit is proposed by the studio
Prohibit copy paste: '(( Although something like that happens quickly without a copy paste X.ID! = X.ID there is also somewhere
Fantastic line Buckets, buckets, goats
Here the type is wrong.
Since it is about abstract types, a where (rt => rt.isabstract) is missing on the RWotypes list, right?  Edit: Or in the method, the RWotypes are packed in a hashset.In the method, when ittery via the objects, it should be checked that only abstract types are checked.In any case, think that only the abstracts are relevant because as I understand it, the specific types are displayed anyway
Method can still be static Nope because of the session context Copy & paste probably, right?The result of gestal features () is only ittery once anyway, so this does not have to be packed again in a separate list.The method itself actually gives back a list, it is only not from the return type.Since it is a private method, this could also be changed to IREADONLYLIST.In older versions, however, I usually try to adapt more than necessary and therefore usually leave something like that. Performance is perhaps not the most important topic here, but depending on the data model (e.g. task), there can be a number of rwotypes (and entry in the authobjects).  Possibly at the beginning of the method from all objects only the object_id_value_field_name field put in a hashset and then HashCet.contains (fpo.id) instead of any () on the list.  In the customer project, you could see how many objects are in the authobjects You could pack both checks directly in a where.If necessary, Sonarqube reports again :-)  I accept, ever.If you are interested, you can still adjust Building the GUI takes a noticeable time.Was already without this addition.Here you could probably get something out.If (authobjects.any (x => x.contains (rwotype.name)))) You don't benefit from the hashset because you are looking for a substring.But at the beginning of the method you could make a copy of the hash set (here probably also a list OK in this case) and from which you first remove all the entries that don't fit anyway.So only entries that start with the Prefix "Feature_" are relevant, right?So you could then take out all entries that don't start with feature_.Then the list is shorter and every any () check should be faster.  In line 174, of course, simply use the regular Hashset  Edit: The Rwoprovider ID is also part of the ID entry.So all entries that the provider ID does not contain
Directory Traversal is currently possible here.It's best to look at the OWASP for ways to secure the web service here Both methods are 'private`.Once big and once written.Take a look at https://confluence.its-service.de/display/lkb/structureller+ Development Guide It is best to check here whether a caching of the values ‚Äã‚Äãmakes sense.If so, it has to be checked how the update of the cache runs We shouldn't get internal information out of public service.It is best to log away the message here and simply give back the standard value.The message of the exception can include sensitive internal information to build the application
Best `File_Path` here if we later extend it to subdirectaries By renaming the service maybe `check file`
Please enter readable names / description in the resources in German and English
I can't actually say anything ...
The methods commented on beautifully.Does the interface or the other also want to give a comment? I added the missing comments. Just a setter but not a bed on the interface? Or is Get implicitly? As discussed, it was as intentional, but as desired I made a method of it.
The contains is not necessary here.Remove returns True when the object has been removed and false if it could not be removed or is not available at all.
Here is simply varicceuri = New Uri (SVGSource, urikind.absolute);  That makes the zero and format check.I weren't local that the user does not influence anyway. If the result depends on the WPFDRAWINGSEDSENTS you would have to take this into account in the cache Should that not always be identical and then it shouldn't be optional
The contains is not necessary here.Remove returns True when the object has been removed and false if it could not be removed or is not available at all.
In the class you could add to which file you can specify the configuration.That's in the .runstings, right?But how does an entry look?I always puzzled and then I often simply adjusted the defaults in the code instead of configuring it .... Comment expanded. With the example you can just copy it out now Oh, I had even read the parameters in the comment but did not ran out that there are examples of the config What is that used for?So there was something that we created user == repo-ID or something for the Oracle tests, right?But why this? Oh, briefly watched in the code.That was with us for the schemes and schema = user and repo.Check.And the constant is for certain tests, you only need a repo.
Rip Sap Hana: '( I let go as close as Close Enough :) Check is useful, should be enough
It does not have to be distinguished here whether the attribute is set (it is certainly not set for old licenses. I think an old license will result in a zero references. Yes you are right.I also have to consider when the attribute is missing Likewise: In the case of an old license, the attributes are not set => Nullargentexception of xmlconvert.toboolean
Couldn't there are also multi -digit version numbers?(We are not far from Lovion 10)  (I am not sure whether this pattern is not exaggerated at all. In any case, I would not have noticed it negatively if the Lovion version attributes simply from `` type = "xs: string" `` ...) Since I convert the string into the version of the type, I would rather make sure that a version is actually entered at this point. Yes, you are right, it is better.
I lack the expansion of the datadictionary.xml and suitable upgrades.Or had we decided to do that elsewhere? They are still locally with me.I think we don't have any things yet where we want to take them off, right? We have now decided to update you "here" (i.e. where you are now) or add the upgrades.
Text = "** v ** regardless of the first thing?" `` <!-Imports version-> `` and `` <!-Test version till-> `` should not be separated by the version.  Rename "test version" here into "test license"?
If I understand it correctly, there should be RWOs for the (permissible) versions, which are then linked.If that's right, I would have expected a combobox with the possible licenses. My thoughts here were the opportunity to give the permissible Lovion version when creating a new license. To enter.But if there are only a few versions that are permitted anyway, the input via a Combobox is not more sensible than via a masked field that must then be checked afterwards, with error message, etc. without ":"
Suggestion: `` Charp #if debug if (args.length == 1) { Connectionstring = Args [0]; } Else { Connectionstring = @"server = localhost \ mssql2019develop; database = product_activation; trusted_connection = true;"; } #endif `` ` I accidentally checked the change.But maybe it's not a bad idea to change that because the SQL instance name has changed.But it is not the same everywhere anyway if I have properly in my head.So prefer to change?If MSSQL2019 already in the demo model, right? From me like MSSQL2019.And with my parameter proposal, this can be adjusted at the start ...
The name corresponds to the C#version Properties (I think), but is not correct with the meanings/naming for Lovion versions, see e.g. Confluence: WhitePaper - Release Strategy - Lovion 7. I think we should call the Lovion naming here. Do you have the link to the Confluence page?I don't find it with "WhitePaper - Release Strategy - Lovion 7" I could ultimately find the page.Do we also want to give the opportunity to enter the version with the SR, ie "6.6.5 SR 1"?I thought it was more about the release version, ie "6.6.5", "7.1.1", etc. No, as expected release versions without SR.But generation-> Major-> Minor, not major-> Minor-> Build.
But then really :)
IMHO could get out the complete final:  1. In the pipeline it has to be switched off with "if" anyway;this PR 2. Standalone is carried out in an existing console anyway, since parameters are required (double click would only be an option with a link anyway).The "Hit Any Key" is more disturbing there. 3. At the start of VS to debug, the "Hit Any Key" is added by the debugger, so there is twice.     That makes sense.I removed the block
In the original, it says that the resource should not be created in the base appliance, but in common resources With a short, reusable text ("no justification", the meaning results.
Permanently?
Please complement the module (see https://confluence.its.service.de/display/lkb/lvndm-datei) Here we had spoken to Markus Fiesel and he said if we components that are needed by the customizing, then they should not be separated from each other.Has that changed in the meantime? Good question.I didn't know the rule yet.@markus.fiesel I should add this at https://confluence.its.service.de/display/lkb/lvndm-datei as a rule of thumb?
Why about such a "cumbersome" While loop and not by. Clear ()?  Edit: Count> Check 0, set restrictionchanged and then Clear () should be enough.Due to the While loop, it looks like something mystical is going to happen :) There is no Clear () in the API :)
Order of the parameters, with Executet tests () it is only that the change reset and then the featureACCESS, with the performance testep () the change set is the last.Packing the change set here for the parameters for the feature access, for similar order?  Then the REF parameter would also be the last one that works better done
Here also the Changeset parameter push you forward so that the REF parameter remains the last.  Edit: Oh, there is another REF parameter.But the change set would still push you forward.  And that is probably "historically grown", but many of the parameters are often not used in the implementations of the ITETEPHANDLER interface.Here too, so the change set on the interface is added, 7 implementations have to be adjusted, but only one requires the change set.Are there no better options or depicting extended interfaces?  ITESTEPHANDLERWITHCHANGESET or something? I create a ticket to clean up the handler.Some parameter could be reached through the constructor of the handler.   https://jira.its-service.de/browse/lpd-66302
Can the conditioned line go away?
This is carried out synchronously, therefore the Invoke method is not necessary here.In the other two places, however, necessary
Looks like tabs and spaces have been mixed here.Please add this and then we can mergen it
So I would have more intuitive here?To specify as a return type and then return zero.But therefore on the ADD () on the modifigeiCollection of the check whether RWotype and Urn are set before adding.Had to think briefly until the check at the top of the add () occurred again.  Is that actually a recommendation or something with a view to .NET8 that no zero -able structure is used here?  If necessary, return default (RwotypeMeandurn) instead of New RwotypeMeandurn () has nothing to do with .net8.It's somehow to build a zeroble.Some structures also have something like ISEMPY or something  Actually, that can't happen.Simply taking it out is the most understandable and the worst would be a refreshth RWO more
How can the same hash set be used?The same structure ok if the same RWO is referenced several times or something.But the same hashset?ü§î  Several repo comparisons do not share the same modif-coscollection > Several repo comparisons do not share the same modif-coscollection  I thought that I thought when I wrote it.So take out?
Which class/instance is the property set?And why does it have to be passed through? The featureMessage is set by rwofeaturesticvisualization wrapper.And passed through for Poolrwocontent Presenter.He builds the rootnodePresenter and we need the feature measurement. I looked at this and generated in the places where Poolrwocontent -Presenter or Poolrwocontent PresenterlogenTywrapper are generated, you have no access to the feature measurement.I would say that it is no different ...
It would be better  `(_Lovionapplication.projectsettings.placeholder resolver is placeholder resolver placeholder resolver)? placeholder resolver.file? .fullname: zero; `  So insert the question mark if File is zero and not return "-", but zero.  In addition, something in the XAML file must then be added.
The following has to be done here: Fallbackvalue =-, targetnullvalue =-  If the binding comes back zero or the binding does not find a property, then "-" is entered. The following has to be done here: Fallbackvalue =-, targetnullvalue =-  If the binding comes back zero or the binding does not find a property, then "-" is entered.
Username -> Username fixed Your username / login Fixed Typo
I find the mixing of username and login a bit confusing.This is effectively the same, isn't it? Yes, right :)
Not very up -to -date knowledge: According to specification, guids do not have to be a random. This is the case for Windows, it doesn't have to be for other operating systems. So in my opinion, better use something else (https://jonatancrozier.com/blog/how-to-generate-a-cryptographical-secure-random-string-in-dot-net-c-Sharp).  Or you make a ticket for it and do it as part of the .NETX change, that's not the only place. I had now taken something manageable in a token length.For really secure you would probably have to take 32 characters or something.But I can also create this with the Securedingsi, like the sessionid I would leave it that way now, that is secured by the prerequisite of the existing subsession. To the old email an info and the new token, right? Doesn't such a decorating changet set not be on the underlying committed?Otherwise all the changes will be lost.Or does the magically in __usercoTServiceemail adapter. No, this is just a trick to temporarily hand over data to the email template.That should not be persisted. To the old login only "it has been changed if you were not that quickly get in touch with us"
In which Szanario would this be not a first levelchange set and shouldn't that at least create a warning in the log? I copied the code block from privilege -wing provider -> Createwebuser ().;) Why can the change set here be dirty, nothing was done with it? so. In the ELSE case you could throw an exception. I don't know about that in relations.Maybe that's valid. I think this is important - we somehow have to make sure that the different emails are synchronous .. Is now in Maybe logging why false is returned? This cannot happen in itself, since the user is dealt with in advance.The tryme method is only used to get to "person" and "user account"
Update name is only available if registration is available?Why the restriction? Copy n paste error
Confirmation is still in here.
To make sure it happens in the right change set, I would pull line 63 further up and use this change set here.Otherwise you cannot guarantee which change set it is and the changes may not be saved. Done
If necessary, not already handed over the XML as an XML, but the associated IFileinfo so that you can also validate against the scheme when reading? The XML is deliberately handed over here regardless of a file so that it can also come from a string that is stored in the code and does not come from a file.This is already being handled in many unit tests and is now also to be used for the provision of standard valueexchanges in Costing.
Zero check of the parameters
There is no vertical scrollbarvisibility = "auto"  Otherwise no scroll bar will be displayed
That belongs in the consumer module.See https://confluence.its-service.de/display/lkb/lvndm-datei
If you use a comparer anyway, you could also have used Contains or Select instead of 2x foreach
Can't the method be abstract?And comment on public methods :)  EDIT: Or if virtual, then deliver back to Storedvalue as a default? Yes, abstract is what I want.Learned something again.
The check should then be superfluous with the change in the Allvaluefields Property, right? That's right, originally I didn't want to make my own property for the Blob fields.But that makes more sense because they have to be treated separately in several places.
Sorted in the wrong place?Shouldn't that be more after the two field checks that check whether the field type also fits?  And instead of the return, an Else branch with the rest? As for the position, I agree with you.When Blobs were not yet supported, the formatted tests were of course useless.But now Si should be done.  As for the Else branch: I am a great friend of the Guarding Clause.Avoid intertwined conditions and instead check the precondition and jump out if it is not fulfilled.In the specific case, of course, it is about distinguishing two variants.So I change it so that they stand equivalent side by side.This is also justified.
Do it! Nice, I don't pack: D
Do not fly here if no element has been found? No, it's the purest magic.And a Kack API
Wat? Perhaps comment on a line if you can't write that more understandably? grown historically.  I only added the last line
A cache of caches (https://github.com/identitymodel/identitymodel/blob/src/client/discoverycache.cs) üòÑ
_Parametervaluelabel_ has the value "value".That should also be used instead of "text".
Arrange the parameters of the constructor even more "nicer", then it is easier to read. Please write the method name big.  The method called a little more meaningful (which includes the Canexecute). Method name as with _canexecute_.
I think the label is not needed, since this is already described by the heading of the dialogue. If the label is needed, the value would have to come from a resource and not be set with = "value".
Please clean up the USings once. _Parameter text => _ ** P ** Arameter text
Can you use refresh highlighting here? The method is there to determine the lines to be highlighted and is called up for every filter update.I think that should be right
Here the examination is also taken regarding path.Otherwise there is an `issuer name does not match authority` exception.I had tested that for Entra ID.
Why is that not done on the popup?Is there anything about it? Yes, if I do this in the popup, the checkbox and the eye button can no longer be clicked
Even if it works, why did the popup go to go at all? Did you look again here? I also looked at that again, apparently you really have to do it that way.Can you still use the mousedown event and not the Preeviewevent. I do Okey
Here you could use the auxiliary method from the feature parameter helper. After consultation: stay that way
Comments are missing Interfaces tidy and commented on Comments are missing   Interfaces tidy and commented on
The variable comes through the interface, the local variables is new and not from the interface, right?If you want to do this as a IREADONLYLIST, then you also have a count and something available.  And can the "variable" change from the parentcontext?Send Varaibles directly as a finished list than to have to re -assemble with the Concat every query.  And since the property does not come from the interface, it has no comment.It could then be added here. The one with iREADONLYLIST is not that easy, so I would have to change 6 overrids of the following species.  Public override ienumerable <Ivariable> Localvariables { get { variable = variable; if (variable! = zero) yield return variable; } }  Yes, the variables from the parent context can change, e.g. if the user adds new variables when configuring a visual program.  I think this will be practically never a performance bottleneck.  I can add a comment. Check through reference equality is correct here?Or is a comparer needed here? Equal reference is meant.  I add reference equalitycomer.default.
Comments for new methods Not sure what you mean by.  The check () method implements Icheckable.  The Description Call () method implemented ifunction. Oh, ok.Not seen that they got through the interface and which are already commented on there in an exemplary manner
Still missing something here?
The name Genericnode and Basenode doesn't say much.Maybe dear namednode instead of genericcone?
Ref is actually unnecessary here, or does that serve readability? Exactly.I like to underline this again that the list is filled within the call
_Null_ Always as an ID is a bit dangerous.
So the object gets a new guid every time.  Maybe better:  public string id {get;} = Guid.newguid (). Tostring ();
Localization?
Interested :) At cast with AS then add a zero check.If the CVAST always has to go through anyway -> hard cast (icustomFunctional featurement group)
Why are the sentences all without "."In the end?Does that fit?
`Log FileSwebservice` -> Kostante The toon is obsolete, or what is determined in line 302?
Actually, this should also work without a task.So: Log FilestransferResponse.Wait ();
30 change to -1.Then the indet state is without a discount of a percentage. That should work without a task. FeatureMessage.onprogress (100, true);can then get out. Should go without a task. FeatureMessage.onprogress (100, false);Can be at the end in a final and then out everywhere. 30 change to -1.
Please set the following for the flap text box: Verticalcontentalignment = "center" and text wrapping = "Nowrap"
Getter and setter use different variables.Is that right?Basically something opaque ...
The "New Empty ()" can get out  Var Response = GetlogFilestransferConfiguration (); return response; It doesn't work without "New Empty ()" because the server needs Empty as a parameter and in the server I can't do it any other way because I define this request in the proto file with Empty The "New Empty ()" can get out  Var Response = Getlog files archive name (); return response;
Todo can go? s. above.
An addition should be carried out here (optional and configurable?) Roll check.Otherwise everyone can always do that. @dimitri.kuhn: has little sense to use Getlazyoptionalservice if you immediately ask the value. I find this syntax to check a service a little strange.Why not something like that: if (! _lovionservicaccess.tryget ...) { throw new exception ... } Why actually `public`? @dimitri.kuhn: could also be implemented as an async @florian.gerhardt here is the virus scanner This always writes about the recently written chunk (because '0' is given as an offset) and does not hang it in the back.Does the full file arrive here at the end? It is best to check the EICAR test virus. Also a unit test, which checks whether the files arrive completely + virus detection would not be wrong. If there is an error in front of line 179, it bangs a 'zero reference exception` here.Dear `Composefile?. Closefile ();` and `Composefile?
Still-note: You should outsource such strings in constants. Better `clientlogstry.exactly (1)` and `Log FilessersViceconfigurationstry.EXACTLY (1)`.Lake `enumera leverage. @dimitri.kuhn: Basically this is a difficult case.This is not a real direct writing process in the name of the user.But also no pure server process.How to handle this with several users in a directory is difficult to decide spontaneously.And whether you should use the file filter (keywords: cross-user writing access in the same directory, writing processes directly via the file service in the future, ...).
Always a new one?
Please also update the method comment. DOHC only uses a call - then that can also be used. ** ‚ùó suggestion (non-blocking): ** Why not contains?does not make a difference, but I think it is easier to read Because of String Comparison. Ordinal
Does this continue to be an exception at the LWAS?Or can this only come about a web service Call?  I would have thought that the warning was coming now .. or am I wrong?
A few little things;  - The empty line can go - The file does not look valid.An ID for the module is missing here? - Please adhere to the uniform spelling of the toolanm - As an `Type`, I think there is` Tool`, right?It's best to look at the whole thing with the Distribution Tool via UI
Wherever hex value is a value as a dynamic resource, e.g. value = "{dynamicresource borderdefaultbrush}" Done
Why is this Klase needed?It doesn't matter and also has the same method signatures as the called up methods?It only makes the code more complicated.If necessary, one could be reader and writer mergen
Was that before, but would change the return type to IREADONLYLIST <String>.Then from the outside you can already ask direct. Count and something like that.Also only as a general info
Zero check from the file system The check here should also be covered via the XML scheme
Is there a "== zero" check here? It looks expensive.If the ZIP file is on a file release, is this opened here and read in it?What speaks against `Origin.lastwriteTime.dateTime 'or similar?  -> Exe LastwriteTime + half an hour (Jenkins ZIP archive and exe file can easily diverge) The == True is superfluous here The `is` for the name sounds strange.  You can summarize the whole property as a `public bool originexists => origin? .Exists` According to Lovion Styleguide, IFS should always be several lines and with `{}` I mean Here should be Return Archive? .Getry (Path.Name)?. Add zero check for the file system Parameters are wrong at the exception.First the parameter name (nameof (Targetpath)) and then the message.  If this is a mandatory attribute, then this should also be entered as such directly in the XML scheme.That there is already a mistake when reading the file It works like a few lines below with `Zipfilepath? .Exists == True`? As discussed yesterday, is it enough `Originzipfileexist?Path.WithneWextension (launchCons.zip.extension): zero; ` There is the Path.WithneWextension method (". Zip"), which adjusts the file extension accordingly.The method also makes a separate check if it is a URL and not a local path.Therefore better use the method.and best place the file extension ".zip" as a constant and then use it
The constant can now also be used from lovion.comon.syncconss.elemsyncjob üëçDone I mean: `id =! String.isnullorWhitespace (ID): ID?throw new argumentexception ("'id' must not be zero or whitespace", "id"); `should also work.It is best to work with nameof () at such exceptions.Would have to be available in the Lovion code, for example `Localization = localization ??New Localizedvalues ‚Äã‚Äã(ID, zero); `Saves a little code here
This should be an argument nullxception I'm not sure whether you can see in a call stack at the end which of the two parameters was zero.So whether origin or targetpath triggers the exception.Hence the parameter name (nameof (variable)) hand over to the check and then add it into the except.The method would also call EnsurotnullorWhiteSpace () or ThorwonnullorWhitespace ().Assert is more reminiscent of the asserts, which are only reported in a debug version These paths should also be used as IFileinFo or Idirectoryinfo (or generally IFileSystemInfo) and not as a string. üëçDone The moving of the TargetPath to the backup path should only happen at the end.So only copy the new stuff into the update folder.If that was successful, then only put the old stuff into the backup folder (or rename), then rename update to Target and then delete the backup. @aminur.khan please check once Check again if you can't use the file system here instead of falling back on string paths Is continued in https://jira.its-service.de/browse/lpd-67357 The file system does not have to be passed here either.I would say that it can actually be avoided anywhere if you already pass an Idirectoryinfo or Ifileinfo. üëçDone The file system does not need to be passed through here, since you can also get it as a property from every IFileinFo or Idirectoryinfo.  The variable target folder path should also be handed over as an idirectoryinfo and not as a string. Done üëç In this method, many strings are again converted into Fileinfos.Please check again whether this is not easier. Is continued in https://jira.its-service.de/browse/lpd-67357 If possible, put in as an idirectoryinfo and then simplify the code here Is continued in https://jira.its-service.de/browse/lpd-67357 Is possible here.`ERDUTDDATADATTORGETFOLDERPATH.MOVE (TARGETFOLDERPATH)`? Is continued in https://jira.its-service.de/browse/lpd-67357 This z.B. is `ERMPUTDDATATARGETFOLDERPATH.EXISTS` Is continued in https://jira.its-service.de/browse/lpd-67357 If you couldn't put in here as a file system information, you don't need to pass the file system through here.At various others, please check again here Is continued in https://jira.its-service.de/browse/lpd-67357
`Using (var reader = File.openRead ())` should also go here.The Lovion File System will then continue to be used üëçDone s. O. üëçDone s. O. üëçDone Check the code again against https://confluence.its.service.de/pages/viewpage.action?pageid=2101493.That probably has to be adjusted to various spots üëçDone
Since I cannot make any comments on the PNG icons, so here the comment: instead of the PNG icons, SVG icons should be used.Kris can create some if he receives the Pngs as a template. Good point.But that only comes with the new design.First of all only the migration
With the short ones I would take the Expression Body Syntax
This has slipped in from the other PR, right?  With the same namespace, Local is more common and I often think by the studio automatically creates when creating the XAML file.
Isn't it enough as visibility here?
In the course of the .NET 8 conversion of the GRPC services, a few little things were noticed:  - What is the `ensures session` method required for here? - Please set the property `service name` analogously to the other GRPC services and hardocded. Isn't it enough to submit the service access instead of the whole plugin?
Has little sense to use Getlazyoptionalservice if you immediately ask the value. Shouldn't that be better `var results = await composefilestream (..)` and then `return results .togrpc ();`?
Doesn't `var stream = await asyncStream.ToListAsync();` work just the same? Using it in two lines seems rather exotic. Why `AccessType.Read`? You're writing into it, after all. Fundamentally, this is a tricky case. It's not really a direct write operation in the user's name. But it's also not purely a server operation. How to handle this here with multiple users in one directory is hard to decide spontaneously. And whether to even use the file filter here (keywords: cross-user write access in the same directory, write operations directly via the file service in the future, ...) is also unclear. Could also be implemented asynchronously. What do you think of the following code here:
```csharp
var fileChunk = chunk.TypeCase == LogFileDataGrpc.TypeOneofCase.InitialFile ? chunk.InitialFile : chunk.FollowingChunk;
var data = fileChunk.Chunk.Data.ToByteArray();
tempMemoryStream.Write(data, 0, data.Length);

if (chunk.TypeCase == LogFileDataGrpc.TypeOneofCase.FollowingChunk && !fileChunk.HasMoreChunks)
{
    try
    {
        DocumentsFileHelper.ValidateWithVirusScanner(
            tempMemoryStream,
            filename: "SendLogFilesToLWASRequest",
            virusScanner,
            tempProjectFolder);
        tempMemoryStream.Position = 0;
        tempMemoryStream.SetLength(0);
    }
    catch
    {
        return SendLogsResult.Error;
    }
}
``` This makes the whole thing a bit simpler, doesn't it? In general, could the virus check not just be done outside the foreach loop? That would save the if condition. Unfortunately, this variant with `fileChunk` doesn't work because of CS0173. Casting `chunk.InitialFile` and `chunk.FollowingChunk`, which would solve the problem, also doesn't work because `LogFileDataGrpc.TypeOneofCase.InitialFile` isn't a type. A virus check on the entire stream also doesn't work because `ValidateWithVirusScanner` requires the stream for a single file, but our stream contains multiple log files (in the meeting, I incorrectly stated that a zipped file is passed). I suspect that checking the chunks individually doesn't make sense. A virus check likely only triggers on the entire stream. @dimitri.kuhn can surely provide more insight here. I wanted to perform the check for each individual file here. If there are no more chunks, then we've read a complete file and check the stream. I forgot to clear the stream afterwards, but I fixed that in the last commit. The `fileName` here doesn't match. Perhaps log the error as well? `fileAccessCheck` is somewhat misleading if you're actually checking directories.
It is difficult to always use the same folder name.Collisions could occur with simultaneous calls.
this maynot be a perf issue, if ToHexString() is not actually allocating a string, but returns the caches string value. to be confirmed.
Are all these namespaces required for this attribute?
Isn't this case handled as a custom tag in `Span.SetTag()` below? This switch is only for special tags that actually set `Span` properties.
This obviously won't work for all the other platforms.
Any particular reason for this? This potentially will make harder to investigate users issues
In general I'm a trying to understand the reason behind this PR. Looks like if a blob (name) already exists we check if the contents are identical? In what scenarios this is not the case? When we want to publish a package/asset that has changed but still we want to use the same version?
As long as we're being extra-vigilant about NREs, should we check that `httpMethod` and `requestUri` are not null?
This check isn't right though.
why not recycling? I Lru cache now recycling?
@cijothomas I needed a way to set the Exporter.ParentProvider when the Processor's gets set. Internal to SDK though.
Why can the pool be null?
remove these from the targets file.
If all you're doing is checking for the existence of a directory as your "temp" directory, why does it matter what OS you're on?
Could be a timing thing here. When options are created they'll copy the ref for the current default propagator. If user sets through SDK the global propagator after that, it won't be reflected. Could leave it null here and then when it is used in instrumentation do `options.Propagator ?? Propagators.DefaultTextMapPropagator`. It would be a slight perf hit but it makes it hot-swappable.
The field `HttpServerErrorCodes` should be called `HttpServerErrorStatuses`
why do we thinkg that an empty string is ok to return from this method? I think the null should never be passed in here in the first place
You missed `Write<T>(...)`! I'm kidding ofc.
Not sure what benefit we gain by extending BaseProcessor here, as this seems to be defining a new OnEnd method. Could we modify MeasurementItem to have all the things, and then MeasurementProcessor can be simply extending BaseProcessor<MeasurementItem> (not blocking. just noting some observations in the PR :) )
I would add an overload `GetCancelledZeroTask()` which calls `GetCancelledZeroTask(CancellationToken.None)`. This is cleaner than requiring the caller to pass `default(CancellationToken)` or `CancellationToken.None`.
So this is not needed anymore for all attributes?
Happy to get suggestion for better messaging here. Here's what I intended to convey: Something is wrong - the Exception is a hint to what might be the cause The impact of that - tracing wont work.
Why not change the other samples?
>20 [](start = 45, length = 2) Can we override this at runtime? Maybe it should be a command line option with default.
This one won't be disposed. Should be (something like) `using var openTelemetry = OpenTelemetrySdk.EnableOpenTelemetry(` no?
The link to valid syntax is not really applicable for NET2_1, right?
We'll want to remove this one if we make the assembly version constant.
This should probably be a property instead of a method.
Add blank line below license header.
What about integrations where we don't plug ourselved on OnMethodBegin?
Look good, but I think a `[flags]` enum would be more future proof? Although i'm not sure if a flags-enum is working from the XML config. What do you think?
Nit: `Http` is redundant in this interface's name.
This class is missing the `MvxPlugin` attribute
Would it break here without trim? If so, can we do trim in Startup.cs so we don't need to add this code to every parser?
> specialised This isn't a typo in my neck of the woods
This should have been moved up above this inner `try` because the log message in the `catch` block does not apply to this.
:+1: that's a easier example :)
stateRoot or maybe ParentHeader would make more sense from API point of view?
Do we want this on by default, or an opt-in (e.g. via some config while add the instrumentation)? I guess a more general question is - what's the bar for the default vs opt-in tags.
I think you also want to update the condition to add ` || impl.Visibility == TypeMemberVisibility.FamilyOrAssembly`.
nit: all other types in this project have full names, so maybe a better name would be `OperatingSystem`?
Why do we need `\n` if we already use `WriteLine`? (and `\n` is not cross platform)
@kristofgazso could you review these warnings?
Are you sure the namespace should change?
@martijn00 I'm not sure why we're keeping the object parameter and return type since this can be done by using MvxApplication<THint> with THint set to object
I've already tried the null-coalescing operator here and got a strange error, so did this the old-fashioned way.
Consider making a constant (e.g. `MetricStreamConfiguration.Drop`).
As far as I can tell, these always get and set the context as an `IReadOnlyDictionary<string, string>`. Can we use that here instead of `object` and get rid of the `as IReadOnlyDictionary<string, string>`?
CI is complaining about this.
@martijn00 so this PR introduces a new ViewModel lifecyle method? It isn't in the PR description/any new docs
We have to `.Complete` now because of empty/null string test cases.
I'm doubting if this should be `if (_layout.IsThreadAgnostic)`, as ThreadAgnostic stuff could be calculated on every thread. (and thus could be lazy). non-ThreadAgnostic should be calculated on the main thread.
`NUnitIntegration` doesn't need to cache this anymore.
Curious, do we consider this as pedantic for example code?
Must these `using` statements not go inside the `namespace` block?
I'm wondering if we can actually base this on a `IMvxPresentationAttribute` instead of the base one.
How come this change was needed?
Thanks for the additional Process helper! Can we also cache the first `Process.GetCurrentProcess()` result in a static field so we don't have to repeatedly call it? It means we would also need to dispose it when the static `_runtimeMetricsWriter` instance is disposed
Should we log a warning/error if only one is specified and not the other?
Iguess you should use ToDbKey here
Do we already have a convention for this? If not, would we consider "DataDog.IsAppInsights". And then use "DataDog." prefix for all this settings, environment variables etc..? Such settings are, essentially, public APIs because they may conflict with customer data. Regardless of that , AppInsights has an s at the end :)
Do we need to distinguish between these two processes? I'm thinking maybe we can have a list of processes and treat them all equally.
This is very expensive (lots of allocations, lots of data copying). Could we do something like check IndexOf('%') and bypass if no hit?
Using `Tracer.Instance` in here is problematic for testing   It will likely cause some other tests to break I think - that's why we started passing in `IScopeManager` EDIT: I see you used `[TracerRestore]` - maybe that'll be enough!
finalizedHeader should be saved in FinalizationManager when we have FinalizationBlockHash != Keccak.Zero
It would probably be better to do: const SecurityProtocolType Tls13 = (SecurityProtocolType)12288
I initially thought (inccoreclty) this is a breaking change! The public api analyzer is a gift!
Unsure of how to handle this one.
I think this should maybe be: var limit = input.IndexOfAny(new[] { '+', '-', ']' }, **posNext**); You pretty much want to ignore any sign that is before the "M". But, if there is a sign somewhere before the M, and also after the M, you'd want to be able to find the sign after the M, right?
so sweet to see a test as the first thing
don't mind the snake cases in the test names. If there are in the test cases, it's fine IMO
parameter should be called removeFromStaticNodes
it introduces a lot of complexity to the state, can we flush straightaway or create a two level flush store where the questions are read form unflushed data?
I refactored the Aggregate, those are hard to read
Should I remove this in favor of the HttpsConnectionFilterOptions overload?
I might prefer changing: public Block FindPendingBlock() => FindBlock(PendingHash, BlockTreeLookupOptions.None); public BlockHeader FindPendingHeader() => FindHeader(PendingHash, BlockTreeLookupOptions.None); in IBlockFinder, what do you think?
what is this address pointing to? what are we measuring here? I want to have a better understanding.
maybe prefix these with `appsec_` for consistency?
@zacharycmontoya Is there any way to distinguish a `SocketHttpHandler` from another `HttpMessageHandler` request?
Add names to tuple elements ValueTask<(Keccak? Hash, AddTxResult? AddResult)>, should they both be nullable?
Should the function above be .FirstOrDefault() instead? Otherwise, why check for null and tell ReSharper to ignore the fact that it can never be null?
in this case, it could be either instrument name or the view name, which could be invalid. might be better if we can offer very specific message. (not blocking this, we can add this as a follow up,if needed)
Just ignorance on my part, but what is the significance of the change from C23NHe2 to C23NHx2?
there are changes that are upcoming to this section. For now, this works (to demo the usage of Gauge), and the changes to this section are coming as separate PRs.
Prometheus doesn't have concept of Meter (like OTLP does).. Trying to see if this is a good approach to use the meter name as namespace, to avoid name collisions, when same instrument name is used across multiple instruments, from different Meter.
"Request line" here too.
`s` is not necessarily the same as `sampler` - sampler could be null and this crazy lambda underneath falls back to something. So please use `s`
Is there a scenario were we want to get an arbitrary set of blobs that don't share a common root?
I believe you should either remove this or rename the PR. You can't change the behavior of the tracer (even to fix a bug) in a PR named "unit test improvements"
nit: just to be similar to others, can you change to interpolation?
We shouldn't be changing this task as we are trying to break our dependency on it and switch to using the shipped version.
Don't we have tests to change after this breaking change? probably we're not using hard coded strings in our tests when we create a `Span`?
-f short form here collided with --force. :)
wondering why we need to join the paths here; seems evt.commandLine only takes whatever appExe is
This seems different than what we do for corrupted request headers. I would like to determine the correct behavior and consolidate this logic.
Consider naming this class `SpanExtensions` to follow C# conventions.
FYI @lucaspimentel and @colin-higgins since you have already approved, I wanted to point out this required change. By fixing `FrameworkDescription` to use the correct logger, it created a cycle between these two static constructors, so I'm removing this log line and delaying it to when it's actually constructed later in the Tracer. Let me know if you find that acceptable or have any suggestions.
what does it mean enabled?
Where did we take this default from?
nit: Can we prefix these variables with `AspNetCore`?
can we make tabAccessibilityIdentifier = null as default?
just remove the entire variable.
Should be a space between line
Why is this needed?
switch parameters should not be positional You don't need the Force parameter
It is more a property than a method, and it has a replacement: `GetUninitializedLazyProperties`. So it would likely be better to write `Please use GetUninitializedLazyProperties extension method instead`.
Was this an intentional change?
This foreach-loop will generate a memory allocation because of the GeEnumerator call on IList<T>. Under normal circumstances it is fine, but since this is in the hot path to writing an log entry we should be careful about allocations. This issue has been addressed in other targets by using a for-loop instead. Take a look at #1020.
I really like how this exercise covers everything we want to cover: creating, adding, removing, iterating. Excellent work!
Turning this dictionary into a list should be it's own PR. I proposed this a long time ago, it wasn't accepted then. I would suggest using a HashSet here instead, because we need to call Contains all the times, and Contains is O(n) in lists, but O(1) in sets
Just for my understanding, are we defaulting null, empty and whitespace string to the supported output parameter?
Remove the body payload
This change will introduce error. The current behaviour is that any language receives the base implementation (English). After having a customized version for Chinese/Japanese there maybe would be logic here to chose which of the two existing models to return.
idem as GlobalDiagnosticsContext. Too bad of the code duplication :|
nit : GetFirstSortSupportedParam -> GetFirstSupportedSortParam
nit: Since this portion of the validation would repeat throughout the rest of the code, it could be extracted into a function. ``` Assert.NotNull(options); Assert.NotNull(options.Expression); ValidateMultiaryExpression( options.Expression, MultiaryOperator.And, e => Assert.Equal(KnownQueryParameterNames.ResourceType, Assert.IsType<SearchParameterExpression>(e).SearchParameterName), ```
You know there is an implicit cast from int[] to ReadOnlySpan<int>?
Why change this return type? Couldn't you just do ``` csharp var contentsStream = new MemoryStream(); var unclosableStream = new UnclosableStreamWrapper(contentsStream); response.Contents.Invoke(unclosableStream); contentsStream.Position = 0; return contentsStream; ``` And avoid that nasty casting in the ctor?
please refer to Formats + ExceptionRenderingFormat with `<see cref="Formats"/>` and `<see cref="ExceptionRenderingFormat"/>`
>ExportJobFormats [](start = 51, length = 16) There is no validation for this collection, so there is chance of having two jobs formats with same name, and first one would prevail. It's probably ok, just want to point that out. #ByDesign
We will have to change this to GrantTypes.ResourceOwnerPasswordAndClientCredentials
Please revert this one also
Just wondering, if status in the SearchParam is null and when we try to Enum.Parse the null value it might results in 500 if not handled properly. Should we handle it as OperationOutcome?
I am wondering if it makes sense to make this a flag to `flatc` rather than a preprocessor flag, since this is generated code, it would make more sense to simply omit this code completely if the flag is not specified
I think we should either make totalCount non-nullable or remove the NotNull check.
Can you please revert changes to this file?
This is problematic when the value is empty/0 ;)
>targetTypeModifier [](start = 73, length = 18) Took me a while to figure out this is local function which doing variable capturing from another upper function. It's reads a bit weird, to pass one value as parameter, but capture another one by context. Maybe for readability reasons, can we pass `targetTypeModifier` as parameter as well?
Is this value really culture specific? Shouldn't invariant culture be provided here?
Does this Add method belong here?
Please revert changes to this file
One final nit: the tests also need to be updated.
A few things on this test: - This won't run the same when the tests are targeting AAD as the identity provider. You'll probably get a 401 instead of a 403. - If for some reason the Client has already gotten a token for the NativeClient, it won't attempt to get one with the wrong audience. - Does updating the Audience like this change it for all subsequent calls?
I think SearchParameterNames is more suitable than KnownQueryParameterNames?
```suggestion #if UNITY_EDITOR ```
Same here, use a cached result
can't we just use the exludeFilters that I created especially for this purpose?
Why not bounds check as part of seek? Why do it after seeking?
This won't allocate. You would have to call ToArray() on the Span to allocate.
Not good. It is `(1 + (changelly.AmountMarkupPercentage/100))`. You can remove `changelly.AmountMarkupPercentage> 0`.
```suggestion // whether this object has been spawned with authority ```
could you please return `ImmutableArray<AnalyzerConfigOptionsResult>` instead of an `object`? Casting struct to an object introduces boxing and adds some extra memory allocation which originally is not part of the measured APIs and should be avoided. ```suggestion public ImmutableArray<AnalyzerConfigOptionsResult> BuildAnalyzerConfigs() ```
Should this still include the underlying exception?
good spot for `var`. ```suggestion foreach (var pair in EnvironmentVariables) ```
Is there a way to use Unsafe.Write/WriteUnaligned instead of having this unsafe block and getting a pointer?
~~Here previous code was better in my opinion. Now the message may be constructed two times by two different means.~~ Well ok, I was forgetting the point of this PR.
Since the class variable for correlation id provider has been removed the constructor parameter isn't needed anymore. #Closed
How about adding the exception string to the `StringBuilder` below instead?
"LAN for different devices on the same network" rather than Wifi, small thing but I couldn't help but notice. And I think it should be put out properly to avoid confusion of any kind.
Could you wrap this if-statement in curly-braces please? Thanks!
Why do you read the OS from environment? How will people compile for Win7 on Win 10, for example? Also, some of the runtime packages don't have folders for all OSes. And so the tool will fail. I thought we decided to skip OS specific builds till we have packages that support Linux and/or Mac.
Why are we doing the boolean thing here?
Can this be ex.Message? If so, then these 3 conditions could just be collapsed into this one and you can output the error message in the log?
This is guaranteed to work because `X509Certificate2` inherits from `X509Certificate` ?
>SendExportRequest [](start = 25, length = 17) nit: can we break this line? It's bit too big for my taste and average developer monitor #Closed
I feel that some string should be passed to the base constructor because that is what will populate the exception message. Maybe something generic like "Multiple bad request errors"?
The sql created from this query returns more than 7000 rows, I think that it would be better to use the `PatientRecords` collection of `Patient` which has less data: ``` var query = from o in db.Patients.Fetch(o => o.PatientRecords) select new { PatientRecords = o.PatientRecords.ToList() }; ``` the same applies for other queries that were added by this PR.
Maybe change into `return _concurrentWrites ?? PlatformDetector.SupportsSharableMutex` ?
nit: why not use `DateTimeOffset.UtcNow` ?
should use 'var' instead of 'HttpResponseMessage' + why does this need to be async?
Why is a generic type used here when all the child classes use SqlBulkCopyDataWrapper?
please make this shorter: if !nullorempty: assign assetid
is this just for cleaner code, or why do we have two functions now?
This build cost should only be paid if EnablePreview is on. How are we controlling it? I didn't notice it in the PR.
is this intentional? the secret value can be null?
Test is failing because of line endings. Please change it to assert specific items you want to check. Please see other mapping-by-code tests.
Nit: Code standard: Whitespaces around operators (||)
wouldn't it be cleaner to recycle in the weaver?
Does it negatively affect Chinese? If so, please add a check for it.
I think nested components also deserve non-public fields
need a ordinal.ignorecase comparison here just to be safe?
We need this check here incase identity is destroyed. We should never be adding real null to spawned
This should still be 429 right?
The return value is the same. Instead of overriding this, you could simply pass the `CollectionConfigurationName` to the base class instead?
Where is this used?
>ToString() [](start = 70, length = 10) isn't ToString() applies automatically to object if you pass it this way? #Closed
This will be a breaking change so we need to be explicit about how we want to handle it. If this code is deployed and there is an existing export job record, the new code will fail, which is fine if that's what we decide to do. Just want to make sure we get into habit of thinking about breaking change when modifying existing code.
@mikedamay This might be a case where the original name is better the exercise-based name. What do you think?
Don't know either. :)
The fluent version is lacking.
why not just make InvokeHandler internal to begin with? don't worry about obsolete here, no one is using this from the outside anyway.
We support only 2.0. And we have defined a NETFX variable you can use instead, of course with opposite semantic.
Wrap `clientCertificate == null` in parenthesis
Mirror.EditorScripts.EditorHelper is very verbose. Why not Mirror.Editor and then Mirror.Editor.Utils/Helpers?
You probably don't want message in quotes here.
Firebird does not like `as count` part.
1) These names are not great, doesn't help explain what they do. 2) Instead of methods like this that hard code some number of = and *, why not a method that takes the string, defaults to a char to surround with, and a width? 3) Do we really even need headers like this in the output? Maybe we ditch them.
why not keep existing function names and name those OnClientConnected etc.? would be consistent with OnServerAddPlayer and so on
Data generated by the harness should be with the binaries, not drop side-by-side with the source code. I do not agree this should be changed.
nit: maybe "Top" in the name is misleading since the TOP comes in the next line :)
Test name says `AllObservation` whereas `_type` param includes Observation and Patient
There is a subtle difference between `SafetyEnumerable` and `OfType`. `SafetyEnumerable` will not filter out nulls, while `OfType` will. Not sure how this is relevant here.
We should avoid using Regex.IsMatch if possible. Especially if there are too many uses of it. Can you try to refactor? Please reach out if not sure. Thanks.
Lets only create the array if PropertyName is NotNullOrEmpty
why is this in here?
>token</ [](start = 61, length = 7) super nit: would be nice to add `.` in the end of sentence :)
I assume this means most tests now pass in .NET for all three types? If so, please update the PR description with the pass/fail(skipped) numbers per model, ok? Otherwise, please un-register the models.
There should be no duplicate values in the dictionary.
Nit: Doc need to be updated to match new behavior.
```suggestion /// Mirror usually only uses up to 4 writes in nested usings, ```
Does this method still need to be unsafe?
Maybe better to make an overload that accepts `IEqualityComparer<T>` and `KeyValuePairComparer<TK, TV>` instead?
I think we need not specify if we're not sure.
Can you make the DirtyBits an ulong instead? that way we support up to 64 parameters instead of 32. Note they are varinted in the [command], so it does not increase the bandwidth.
Both TrimStartRangeConnectorSymbols and StartsWithBasicDate seem a little convoluted and use many regexes. For now I suggest adding a @TODO in the code to revisit later to simplify.
I don't think this check is needed since we return null either way.
Lets make this `#if Stu3`
hhm, the return value is not used anywhere. Did you check what happens to the actual calls to `ToCharArray()`? Is your code even getting called?
Check for null here? No reason to set it if it is null already?
paramInfo -> searchParamInfo paramInfo was little confusing to me but may be its just me.
nit: I am not familiar with the `ControllerActionDescriptor` class, but can we use `ControllerName` here instead of `ControllerTypeInfo.Name`
Need to check to see how this would affect things like CosmosDbDistributedLock.
Is this intended to be checked in?
Any reason this needs to be `public static`?
var sizeSplit = row.QuerySelector(".box_meret2").TextContent.Split(' ');
Looks like tests might random fail due to time not sync between test machine and FHIR server?
this is wrong. StatusFormatted might not map to a specific InvoiceStatus
Can you place the two declarations close to each other and have the decision to which one to assign explicitly show the choices? This will help readability.
Can you explain what this is for?
This shouldn't be based on the string value. This should be based on the flag for extendedtypes being enabled or not, no?
Should Token-Token composite also be included in this list?
It's better to rename the DateTime version of BaseMergedExtractor to BaseMergedDateTimeExtractor
If theres no errors and you want to return an empty collection, wouldn't it be nicer to just do `Enumerable.Empty<ModelValidationError>()`
Shouldn't this use the `ImageView`'s context? The app context could have a different theme than the activity's.
We need to specify the content type here of `application/sql`. Additionally, we probably want to change the return type `File` and also specify a filename which will then set the `Content-Disposition` header.
seem to be repeating this 3 times. Don't repeat yourself refactor into a method and call it from the 3 different OnXXX
`default(int)` ? is that just `0` ?
nit: maybe open a github issue and link to it from here?
ugh, why such hack? Just serialize the whole `List` via the JsonConvert
I don't think that `isAtParam` should be a first-class concept of SearchParameterExpression and IExpressionParser since at is only used in History
shouldn't we always check CheckSendRate?
Need to have a test with non value type identifiers (strings for example).
Will we have a logger for this class?
It looks a lot like a duplication of the `CacheFixture`. Can it be done by deriving from it instead, like what is done with `SystemTransactionWithoutConnectionAutoEnlistmentFixture` by example?
Remove the error message.
This logic is still duplicate here and in the ParseUnspecificTimeOfDate method. Timex generation should be centralized and future/past resolution should leverage the same method to avoid inconsistencies in the future.
Suddenly we get here and `bundle` can be null? This seems like a contract violation since previously in our history `bundle` could never be null.
this would be better in a separate pr first. also I don't think it should be virtual. we can't assume default, so might as well make it abstract and force transport devs to implement it
`<c>` should be `<see langword=".."/>`
Why this conversion is required? You can call `_cache.LockMany(keys);` directly
I'm wondering if we can actually base this on a `IMvxPresentationAttribute` instead of the base one.
nit: The cases for `RecordNotFoundException` and `FileNotFoundException` are doing the same actions on the result. We can simplify the code
I meant to make this a field instead of using prefix and suffix
remove (short) cast if not needed please
What do these represent? All multipliers? If so, the regex should be named NumberMultiplierRegex as in other languages and reference the one in BaseUnit if re-using all values.
I think we should use CamelCase because other place uses this way.
Should we instead control the files to be built at the csproj level? I think that having a single point would be cleaner. Thoughts?
This is not part of this PR, but creating string.Join defeats the purpose of our formatting APIs. Would you mind filing a bug to fix that?
I think it's better to wrap this exception creation in some method to minimize copy-paste for future extensions/refactorings. So it should look something like: `throw DirectUsageException();`
We can remove the English ones, no?
Why do you use IReadOnlyList here, but int[] in GetProduct to represent dimensions?
From my limited understanding of group, what happens if the `Group` resource does not define any members and only has `characteristic` defined? Do we have to handle that scenario by searching for resources based on the `characteristic` value?
nit: why not: ` return new SearchResult(0, new List<Tuple<string, string>>())`?
This method has a very clear intent to do simple calculations. I don't think passing timezone names into it is a good design.
What about all other `Owned*` implemenations?
>optionsExportConfig [](start = 47, length = 19) nit: maybe rename to `taskHostingConfig` ? Here and in other tests in this file.
I was thinking of 'RenderEmptyObject`? What do you think?
```suggestion var searchParamIdColumn = VLatest.SearchParam.SearchParamId; ```
>CompountSort [](start = 88, length = 12) nit: typo, CompoundSort
While the config is most of the time a file, is file here really the right term?
nit: IsPartiallySupported ?
What's the goal of this change? By design we don't support unicode in URLs (unless there is a very strong reason to add it). There is also no new spec in this PR that relates to it. Any new fix or extension in code needs to at least have a new spec to show that works.
This could be null right?
It might be better to rewire this to have the correct behavior for R4 and alter it only for Stu3. So the UpsertAsync method in the `*FhirDataStore` throws the `PreconditionFailedException` and the Stu3 handler provides the backwards compatibility. Thoughts?
Just to confirm my understanding of this, if import is enabled than all non-excluded requests will fail even if an import is not currently running?
nit: I think move the declaration of `_delayBeforeNextPoll` into `ExecuteAsync` since its only mutating state within that function
I would probably just call this `Instance` instead of `InternalLogInstance`
Have you considered maybe delegate the "authentication" part and glue them together in IoC container?
This line can throw an exception, change it for: ``` return match.Success ? match.Groups[1].Value.Split('/')[0] : title; ```
`else`, test that that Api Access work
I don't think this is the correct place to modify. PrepositionRegex covers prepositions. And DateAfterRegex covers dates after. This change mixes them and breaks their intent. "<T> or later" seems a special case of dates after. Maybe make the "than" optional or have another usage of a regex similar to DateAfterRegex to use only in the new case are better strategies.
I'm now thinking it might make more sense to move both these methods into the if/else, e.g: ```csharp if (_bundleType == BundleType.Batch) { await FillRequestLists(bundleResource.Entry, cancellationToken); // ... } else if (_bundleType == BundleType.Transaction) { await _transactionBundleValidator.ValidateBundle(bundleResource, cancellationToken); await FillRequestLists(bundleResource.Entry, cancellationToken); // ... } else { throw; } ```
Is `MidpointRounding` argument actually supported? It looks likely to me it is in fact ignored. In such case, better do as the `Math` generator do: do not support overloads with this argument.
This flag indicates previous digits have been processed, right? I'd suggest renaming it to something like isMultiDigit
Move this code at the end of `ConfigurationDataBasicLogin` and remove the `InitCategoryMappings` method.
This is not the correct way to check for enum flags.
please move those `#if !__ANDROID__ && !__IOS__` to a minimal scope. For backwards-compatibility
Should it explicitly use the invariant culture?
what about 0.0.0.0, and even the ip of the server?
nit: naming convetion
Why not also enable as an extension method? ```suggestion internal static bool GetIsStrictHandlingEnabled(this RequestContextAccessor<IFhirRequestContext> contextAccessor) ```
Please do not include new public methods in the public consumer-level interface. This can be considered a breaking change as users won't use it without special knowledge.
You can replace this with `if (!ShouldDeleteOldArchives())` as well.
can you add this assert after the click on `analyze-psbt`? This is what I wanted to do actually.
Could also be `permission.Actions?.Any() != true`
Where is this used? What are the "tag"s that this relates to?
Having a default value for the CancellationToken here changes existing behavior (which is to have a CancellationToken that gets cancelled after 1 minute). Is this something we want to do for this method? If not, maybe we should add logic to check for the default value and handle appropriately?
Are you sure that should be ReferenceEquals?
nit: new line at the end of file.
Let's just call this `cookieValue` now.
For backwards compatibility, we need to leave`EnableShoppingCart` there. Then we do this kind of logic: ``` settings.DefaultView = settings.EnableShoppingCart? PosViewType.Cart : settings.DefaultView ; settings.EnableShoppingCart = false; //update ```
This should probably be prefixed with `Mvx` like other MvvmCross types. Maybe even more specific with `MvxForms`: ```suggestion public enum MvxFormsModalPresentationStyle ```
Let's make these names clearer. What about the previous regex is renamed to SpecificEndOfRegex and it will be used in cases where you have "end of" + $date_or_range_to_be_parsed The new ones could be UnspecificEndOfRegex to be used with "generic" terms like day, year, month.
should we pass in the same `_jsonSerializerSettings`
is this still needed?
I thought you added 0.5% of changelly fee as well ?
I think we use s_xxxYyy as the naming pattern for private static fields
Should `systemAndCode.Code` be exactly null or can IsNullOrWhitespace also count?
.ToArray() is not required
Can you do the same for Result?
Do we need to create the patient 5 times or can we just create 5 new patients using the same patient object?
So just confirming that if I passed in `?_type=Observation,foo1,foo2` then the resulting Bundle self link would have `?_type=Observation`? #Resolved
Are you sure of this? I think `dom.QuerySelectorAll(".browsetable")` always returns a list (that can be empty, but not null).
We don't need to check for this here, we can just override `CheckForActivity` inside ULocalConnectionToClient
I would make this receive the TypeReference instead. Then this becomes reusable for parameters too.
Why can't JIT inline it? This is tiny method, it does not sound right to require `AggressiveInlining` on it for good performance.
Can we remove any of these using statements?
```suggestion public static bool ReplacePlayerForConnection(NetworkConnection conn, GameObject player, bool keepAuthority = true) ```
This change isn't right. The idea was to return the result of the atomic operation. ```C# public override bool Release() { var result = Interlocked.Decrement(ref _referenceCount); if (result < 0) BuffersExperimentalThrowHelper.ThrowInvalidOperationException(); if (result == 0) { OnNoReferences(); return true; } return false; } ```
Can any of these fields be null?
There should be no need to add the different width chars (e.g. ""). This is normalized before hitting the regexes.
I would make this `==` instead.
This is a regression compared to the previous PR. It will fail for other languages that are not EN/CN/JP. Can you add back that if/else that returns the customized extractor for CN/JP and the base English one for others?
year should be set with a replacement during generation. Also elsewhere
Should we worry about the case (perhaps reject the search) where the user has invalid search such as ```GET [base]/Patient?_type=Observation```?
```suggestion if (qLink.QuerySelectorAll("span").Length == 1 && release.Title.StartsWith("NEW! |")) ```
why is the getter editor only?
you should recycle it in line 590, which is a very common case, and not an error. Otherwise you are leaving a lot of garbage behind
I think I'd prefer this manipulation to be done in a method on SearchOptions for now. i.e. `searchOptions.AsCountOnly()`. The property can then remain as private.
Please don't change existing unit tests, without good reason. (this is also a hint that it isn't backwards compatible)
"two thousands" is 2000s, not 20s. This needs fixing. Same for "noughties" "twenty-tens" should also only covers 2010s. Are you sure these cases cover only the right occurrences? I can't see that from the tests.
does the websocket transport have a MaxPacketSize similar to LLAPI/Telepathy? for telepathy I will do buffer = new buffer[MaxPacketSize] etc. which would avoid the code below
```suggestion await client.ConnectAsync(Server, Port.Value, MailKit.Security.SecureSocketOptions.Auto, connectCancel.Token); ```
Shouldn't we validate that `modes.Count > 0` before trying to access it?
nit: For `.Validate(payload, null, null)`, it would be nice to include the parameter names when passing in non-descriptive values (such as null, 0, etc). Something like `.Validate(payload, profile:null, mode:null)`. Makes it easier to read the code.
I also notice this ambiguity thing in some of the test cases, thanks for fixing. But this fix seems a little weird to me. How about the text is "morgen." (with dot ending) or "morgen" is part of the query? Also, we suggest use bracket after if statement in C#.
`TableViewSource` should be `MvxPageViewSource` :)
proposal: "NLog configuration as XML string" (I find The XML contents confusing)
Do we need to put `LTTng` in these names for some reason? If we can keep our view a little more generic that seems better to me.
note this is **not** binary compatible, because optional arguments are filled at compile phase. Please remove the optional, and add an default ctor for backwardscompatiblity.
Should we enforce ordering on the claims collection so that it serializes the same every time?
This is already set 2 lines down.
>LogWarning [](start = 24, length = 10) That would only give you last exception in retry cycle( at least if I correctly understand how retry policy works) There is chance you run retry few times and it fail with actual problem, but last time you would get just 429 because you send to much requests to DB. Also `LogError` can take your exception and maybe format it in better way. Plus exception feels like error thingy than just a warning.
Nit: slight rewording - what do you think of this? `The execution of IHostedServices depends on the order they are added to the dependency injection container, so we need to ensure that the schema is initialized before the background workers are started.` I usually opt for typing out abbreviations instead of shortening them for clarity. Ideally someone who is looking at `Startup.cs` would know that DI = "dependency injection", but I still think it's nice to avoid short forms.
```suggestion static NetworkIdentity _localPlayer; ```
What is this token for?
maybe rename to lastPingTime so it's more obvious what this does? someone could confuse it for the last ping result, like 20ms
nit: might be nice to have one more param after the _destinationConnectionSettings to make sure that is still part of the url after the removal.
>of for [](start = 38, length = 6) super nit: two prepositions together look weird for me, but English is not my native. #Closed
Why is there a whitespace in this entry and in "cy"?
Should this be the last exception middleware added so that it sees the exceptions before they are handled by the other middleware?
```suggestion int msgType = MessagePacker.GetId(typeof(T).IsValueType ? typeof(T) : msg.GetType()); ```
Same here for potentially a system wide search?
This should be moved to common class for all languages.
>string [](start = 15, length = 6) Can this be FileInfo? Then, validate with `!fi.Exists` #Closed
What is the benefit of using the nullable boolean? It looks like you only set it to 'true' or don't set it.
we should do this after runInBackground. runInBackground seems to be more important here.
fix the formatting.
nit: Maybe we can use `HeaderNames.ContentLocation` here
After further thought, maybe the pipe.Writer.Complete(ex/null) calls should be moved to StreamExtensions.CopyToAsync() itself. @davidfowl Do you agree? If so, I don't think StreamExtensions.CopyToAsync() should ever throw since you should observe any exceptions by reading from the pipe.
```suggestion Length = Mathf.Min(Length, Position); ```
I'd assign the result of _currentFragments.ContainsKey to avoid a double look up.
Must these `using` statements not go inside the `namespace` block?
Why does the PR description mention "Todo: filter invalid fraction."? Doesn't this change address the issue?
Maybe change this to: public void Body(Stream body, string contentType = null) Seeing as you already have the null check / default value further down?
could you do the TimeSpan part in the line above this one, and then pass the variable to KeepAliveInterval? it would be a lot easier to read :)
Use `NHibernateUtil.Initialize(payment);` for a clearer purpose of this line of code.
What if con is not OleDbConnection?
```suggestion logger.LogError($"Only {byte.MaxValue} NetworkBehaviour components are allowed for NetworkIdentity: {name} because we send the index as byte.", this); ```
why this change?
Why do we need this new constructor?
```suggestion Weaver.Error($"{fd.Name} is a generic SyncObjects so can not use directly in NetworkBehaviour. Create a class and inherit from the generic SyncObject instead", fd); ```
Any reason for not making it abstract ?
Couldn't this be solved by just doing `public static string ToUpper(string str) => str.ToUpper();`
Shouldn't this be modified according to Italian? Is there a specific test case for this? I'm definitely not familiar with Italian, just a kind reminder.
Nitpicking, but I'd prefer a `string.Concat` instead :)
Should this be a TransactionFailedException with a status code of `400`?
super nit: DenormalizedPRedicateIsPreserved -> DenormalizedPredicateIsPreserved
```suggestion internal class SyncCacheReadWriteLockFactory : ICacheReadWriteLockFactory ```
It follows the style of the other missing field messages on this page, if you just remove `The` from the Display Name. Also need asterisk here :)
If validators is null, how do call `ToArray()` on it?
Is this needed?
Do we need to check if it is changed? or can we just call set?
Maybe for consistency with the other test names do: ```suggestion public void Longest_country_name() ```
```suggestion public Vector4 DivideByScalarBenchmark() => Vector4.Divide(VectorTests.Vector4Value, 0.5f); ```
this looks very game specific. can you explain why this should be in all projects?
I think this should be above the definitions that use it.
This should be a set instead of list. why? Suppose you add 10 elements to a sync list, onDirty will be raised 10 times, and the same will be added here 10 times so it will be synchronized 10 times.
for compatibility purpose I prefer we don't add new stuff here
Maybe rename to just `Put` or `PutMany`
#humanstylecop Could we replace the empty quotes with `string.Empty` and this and the next line? Thanks :neckbeard:
This should be a single timex generation method that receives the necessary input and returns the final timex.
I prefer IpAddressModel as a name for this.
Nit: Please don't add unnecessary blank lines.
```suggestion [Obsolete("Use NetworkConnection.identity instead")] ``` make it more obvious
Did you intend to store these in DEBUG-only fields?
Shouldn't this be the binding config rather than separate properties for each binding config option?
nit: prefer Invoke, as it looks less like a method within the class: ```suggestion using (IScoped<IFhirDataStore> dataStore = _fhirDataStoreFactory.Invoke()) ```
Stream based APIs should not be in .Primitives components. We use .Primitives suffix for non-allocating APIs that operate on buffers usually represented as Span<byte>. Stream-based APis should be built on top of the primitive APIs and reside in a separate package.
This can use same set of optimizations as the decoder.
Please remove this.
Sorry, because this isn't really related to the PR at all, but @davidfowl why would you ever need this API in a world where you already have PipeFactory.Create()?
if you are marking this function with Obsolete, you shouldn't also change the body of the function
What is the exception case that the general catch will cover that the JsonPatchException wont? I'm concerned about this catching and passing over an exception we would want logged.
I think `since` should be passed in as a PartialDateTime since thats what it is expected to be, its only the storage that treats is as a string
These cases should become a regex, as potentially other synonyms will show up.
I think it's fine to make the message not required to be null in the base MicrosoftHealthException. The Exception class does not require it to be non-null anyways and you don't have to repeat these messages everywhere that's not going to be used.
Should this not have a slightly more meaningful url/name? :)
```suggestion UnityEditor.Undo.RecordObject(this, "Added default NetworkAuthenticator"); ``` brain fart
> Defines the functionality for Nancy diagnostics
Fallback is always to English-US. Fallback should only be triggered if some culture is really not supported and the enableFallback flag is used.
nit: bool instead of Boolean
Shouldn't this say "&lt;future&gt;"? :)
@brandonpollett suggested we move this registration out here and allow the user to explicitly register it, which I think is a good idea. Will implement that.
while you are at it, you can use an enum? :D
Nit: Can you do the same for the other terms for consistency?
We could rename this to SafeCreateFromValues or something like it.
this should be >= or not?
This is used to deal with partially encoded characters. You should not need this (together with the code that deals with it) because of the corefx decoders do not ever stop at half character. Instead, they stop will not fully consume the input buffer.
Curious, why other resource types are not supported?
Am I missing something? I don't see this new constant being used anywhere
If there was ever a case where _referenceCount could be < 0, it means that someone called Release without having previously called Retain. Assume that bug exists, what happens when your dispose method calls the ArrayPool return method twice with the same array reference?
master has abstract ServerUri, this still has virtual
I've been checking in trackers to see if they accept an empty query string and skipping the `IsNullOrWhiteSpace` check if they do. Can you test on the site to see if `&search=&` in your search url returns the expected results and update accordingly? Other than that, this passes muster and this request won't block merging.
We should specify UTF-8 as the encoding here. The project assumes all specs are utf-8.
Be careful when you merge the code.
This logic should be the same across all languages. Please move to a common method that receives what the TOD is and returns the range.
Given this issue, perhaps we should consider passing around a new type, IStartupHint (and associated IStartupHint<THint>) that has a property Hint. Rather than passing back an updated hint, the Hint within the IStartupHint object could be updated.
Don't need the `string.Format` now
This is an unneeded breaking change?
```suggestion bool isOwner; ```
nit: since the other features start with a verb, maybe this should be `IncludeTotalInBundle`.
Perhaps this should move to the base class since minimally, it should initialize the schema.
This test fixture should be ignored if `!Dialect.SupportsScalarSubSelects`.
Is this used?
This will not exist in release builds, which will lead to possible overflow of destination buffer on write.
```suggestion Html = $"To create an invoice, you need to <a href='{Url.Action(nameof(StoresController.UpdateStore), "Stores", new { storeId = store.Id })}' class='alert-link'>set up your wallet</a> first", ```
Ideally this method signature should be modified. It looks like it's doing too many things and returning too many side-effects.
If the exception doesn't have a retry after value, should we add one for consistency?
Please reduce nesting (see sonar code smells)
Can we invoke ExecuteNonQueryAsnc instead of ExecuteScalarAsync as we are not expecting any value from database?
Should this be done outside of the foreach loop so that it can include all of the information?
```suggestion [EditorBrowsable(EditorBrowsableState.Never), Obsolete("Use playerController.visList instead (=NetworkIdentity.visList")] ```
Why do we need to both CheckDenyList and then FilterAmbiguity? Shouldn't they be the same or at least the ambiguity filter be inside the other method?
You've missed the ordering of vars, should be `$"{baseStr} {TextMapping[notification.Event]}"`. I would invite @pavlenex to double check and verify strings.
Same, this does not belong here
Should be match not matched :)
```suggestion PosViewType viewType = settings.EnableShoppingCart? PosViewType.Cart : settings.DefaultView; ```
add trim, it's not necessary for this case but I think it's a good idea
Nit: Could the if statements on lines 89 and 116 use hasElements instead of checking elementsSearchParameter? #Closed
```suggestion Debug.LogWarning($"Closed connection: {networkMessage.conn.connectionId}. Received message {typeof(T)} that required authentication, but the user has not authenticated yet"); ``` I don't think this is error-worthy here. attackers will try to do this eventually, it's almost expected. as long as the code behaves as it should, it's not really an error.
Why not just `return lastCardinalTerms.Contains(trimmedText);` ?
This is not a modifier, this is a named group. It should be properly named and added in the // Groups' names for named groups in regexes section.
```suggestion // ServerChangeScene can be called when stopping the server ```
I don't think Korean needs this. As far as I know, it uses whitespace as separator everywhere. Also, this could be an attribute in the language-specific url configs. IsWhitespaceSeparatorCulture. Only Chinese and Japanese would return true. The attribute could be declared in YAML and exposed through the new config class you added.
FindObjectOfType is arguably worse than the previous solution. of course, this is just in one of our examples. but it raises the question, how would existing projects find the networkmanager in similar situations? findobjectoftype is not an option in bigger projects.
I could be wrong, but does this even compile? don't you need to cast the whole thing to float?
These values should not be hard coded here as the base parser is used for CJK. Any declarations like these two should be made in the YAML file and referenced in the parser config for each culture.
Perhaps just use `Core` then we could reuse the Modules
Ideally all such strings should go into YAML files.
Why is this needed?
The buffer is called "buffer" here and "encodedBytes" somewhere else. Let's make it consistent.
We already have ``` csharp contentMimeType.EndsWith("+json", StringComparison.OrdinalIgnoreCase) ``` I think we should just remove ``` csharp contentMimeType.StartsWith("application/vnd", StringComparison.OrdinalIgnoreCase) ``` I don't know why that'd be a requirement for a JSON serializer...
I would prefer to see `this.RequestScopedTypes = Enumerable.Empty<TypeRegistration>();`
If the feature isn't implemented here can we leave a trace to make it easier to discover?
Should these properties be `public`? I'd suggest to make them `protected`. Otherwise it's easier to misuse them
for performance reasons, we prefer: - do the toLowerInvariant in the setter of Format. - use OrdinalIgnoreCase comparison. Could you please change that? Thanks!
using UnityEngine would make this shorter in two places
>0 [](start = 103, length = 1) nit: you can put {count} and that should be properly displayed in logs, AFAIK. Also no need for string interpolation.
Can we extract this to a method? (DRY)
single-line if-statements should be wrapped in curly-braces
Should this also check if the anonymizationConfigFileETag is provided?
File should be renamed `PluginLoader` -> `Plugin`
why not stopwatch = new Stopwatch?
I need to see how this scales for large directories. The mono file watcher fell over pretty quickly in that case. CPU usage was through the roof.
This needs the lock, right?
This is the most optimized implementation, but I'm thinking it might be easier to build a list for maintainability. Having array indexes that are set out of order seems like its going to trick us up at some point
`person` is already loaded to session. There is no need to call `SaveOrUpdate` here (this method should only be used when you want to update object loaded in different session)
nit: `TheServerShouldReturnNotAcceptable` ?
In general, you should get Bytes once, store it in a local and then use it (if you need to use it more than once).
Is there a reason we want to store the updated Output? Since the job has anyway been cancelled, will the Output data be used?
Do you know how much of a problem Jan 01 1970 would be here? If it's just off by a nanosecond when casting to float then it might be worth having that unix standard here
Maybe MinimumSupportedVersion would be clearer?
This could be: if (_owner != null) _owner.Retain(); bufferHandle = new BufferHandle(_owner); since _owner being null in the ctor is acceptable.
Nitpicking, but shouldn't it be "Most likely the Model, or a property on the Model, is null" ? :)
I think there is a small typo and a PascalCase parameter name: ```suggestion Dictionary<int, string> existingDictionary, int countryCode, string countryName) { existingDictionary[countryCode] = countryName; ```
shouldn't we keep the allClients[0] for the sake of still being able to use .allClients while obsoleted?
Are these two removed as no longer relevant? Or not implemented in Swedish? I need to do a comparison with English before completing the review.
Shouldn't the default value here be false?
nit: i think NotSupportedException is more appropriate.
spanish should be German, right? :) Did you use the English class as base? Or the Spanish ones? The ideal case is to use the English ones.
if we change this signature to `string this[string requestDirectory, params string[] allowedExtensions]` then `allowedExtensions` can be passed along to the delegate as well and maintain the same functionality as before
This is just `_constructorNode.ConstructorArgumentTypeList`
Since we know that `TrimStart()` isn't necessary, just call an empty `TrimEnd()` to avoid checking the beginning of the string again. ```suggestion .Trim().TrimEnd('-').TrimEnd(); ```
It might be a better approach to wait for the `passwd` to be available before we continue. I think you can use something like ```suggestion WebDriverWait wait = new WebDriverWait(driver, 5); wait.until(ExpectedConditions.visibilityOfElementLocated(By.Name("passwd"))); ```
Should this property be called Encoder?
Exceptions classes should be marked with `[Serializable]`. Since `HibernateException` has a deserialization constructor, it should be added to this class too. ```c# /// <inheritdoc /> protected NotInstrumentedException(SerializationInfo info, StreamingContext context) : base(info, context) {} ```
Why is this a while loop and not an if?
Same, and so on.
What is the difference here between running this with `IRequireInitializationOnFirstRequest` with background task vs `IHostedService`?
nit: `SetupDataStore` seems to be doing only one thing. Do we need to wrap that in a separate function? Might be cleaner to call it directly here?
This test does not prove an allocation did not take place, only that various mechanisms of creating an empty string return Utf8Strings that point to the same buffer. Perhaps _EmptyUtf8StringsShareASingletonBuffer_?
Proposal: rename to "WriteToDiagnostic" - it's more in line with the current naming
Again either an explicit cast or handle `as` returning null.
`NLPhoneNumber` would be fine for the Netherlands. (instead of `NLlandsPhoneNumber`)
maybe we should make this obsolete with the hint to use NetworkTime.rtt? kinda redundant otherwise
Shouldn't this be a specific variant? Or "ar-*"? The goals should be to cover as many variants as possible without needing separate models.
If you remove `LayoutRenderOptions.None` from this method, then I think you will get better code-coverage by the unit-tests.
This actually had 2x bug because someone wanted to be smart and let the compiler find the length of the string. To have been consistent with the original bugged code, it should have compared against 5.
Less repetition than French, but this could also be optimized. Low-priority.
There, with my fallback suggestion, a more explicit null handling would be required. When `GetUninitializedLazyProperties()` yield null, a set of all lazy properties should be yielded. (It can be built from the EntityMetamodel.)
We could also make this method public and have the caller explicitly initiate authentication process.
Asking for type is a code smell. Not that it doesn't happen elsewhere in NHibernate, but I'd rather not introduce more of it.
nit: format. There are braces on else but not if. Also, newline for throw.
Unrelated change, should be reverted.
please add `readonly`
All the provided types have the FHIR value in EnumLiteralAttribute. It's not always true that the FHIR value will be camelcase.
It might be nice to store this value in a constant in `SchemaVersionConstants.cs`.
This variable is never used anymore
```suggestion try { client.GetStream().Close(); } catch {} ```
Should we pass in `DateTimeOffset?` and do the format in this function?
```suggestion internal bool CanSkipElementExistenceCheck(object element) ```
I think you don't need to trim.
This looks like a shallow clone. If so any reference properties would be shared between the original object and the clone. Do we alter the expression object that is passed to the Visitor, or de we generate a new object which is assigned to the clone?
ICommands should be wired up in the get. ala: ``` + private ICommand _stateChangedCommand; + + public ICommand StateChangedCommand + { + get + { + if (_stateChangedCommand == null) + { + _stateChangedCommand = new RelayCommand<VisualStateChangedEventArgs>(OnStateChanged); + } + + return _stateChangedCommand; + } + } ```
Is the default really true?
Could you please also move all hardcoded values to constants. Like "midday", "AM", etc, above.
No need to duplicate regex and list. You can pre-process the regexes to build these lists.
I was wondering what the purpose of this particular method is. Isn't creating the dictionary already covered by `GetExistingDictionary()` and addition by `AddCountryToExistingDictionary()`?
could you disable this rule in your IDE? :)
Nit: in most of this usage, var => whatever type it actually is
remove it please
I think there is a small type here: ```suggestion public static Dictionary<int, string> GetEmptyDictionary() ```
how did the analyzer not catch the lack of a header?
This allocates, just cast it to ushort and write that. For reading read an ushort and cast it back to char.
Why remove "@"central daylight", -300 }," and "@"eastern daylight", -240" from a previous commit? These names are still timezones we want to catch, but their resolution should be -1000, as they are ambiguous.
As a coding style, we usually include the { and move the then to the next line.
Not much point in having a field for this. I would just do `public bool IsValidAsCompositeComponent => true`
Please replace the regex options with RegexFlags like in PR #1688.
This is redundant since the same test already exists in the batch one.
generic method next, same as GetService, would be nice. (consistent API)
I think this was inadvertently deleted.
We should have log for start/complete/error.
what is the differentce between stop and shutdown?
```suggestion static readonly OpCode[] emptyBodyTemplate = { OpCodes.Nop, OpCodes.Ret }; ```
SortParameterExpression -> SortExpression ? I see that IncludeExpression is not IncludeParameterExpression
Shouldn't merging of durations be at the parser level? Usually the extractors are lighter and parsers are the ones that rely in deeper semantics. What would be the drawback of moving the merge there?
Can we pretty please do `using Uri = System.Uri;` instead? I would edit in browser, but I want to make sure it compiles and nothing slips through. But I really really don't like `using System;`.
Is the Volatile.Write necessary?
I would reset this to `false` in a `finally` block, because Close() might return false, or exceptions might be thrown.
Is the String.Format necessary here?
can't you use GetComponent<Player>.playerNo here?
Use the const here too.
I think we should explain here in code why it is not disposed immediately. Something like: ```c# // This context is disposed only on session own disposal. This greatly reduces the number of context switches // for most usual session usages. It may cause an irrelevant session id to be set back on disposal, but since all // session entry points are supposed to set it, it should not have any consequences. ```
Is this a performance boost according to the test? Because we also won't use regex caching, (static regex), which is maybe not that nice. Also I'm bit in doubt with this change due to the name of the property. What do you think?
Why not just delete this?
As this code is used more than once and it's not really one-liner I would wrap it in `IDisposable` class. Something like: ```C# class SessionContext : IDisposable { private readonly ISession _session; private readonly CacheMode? _cacheModeToReturn; public SessionContext(ISession session, CacheMode? cacheMode) { if (cacheMode.HasValue && cacheMode != session.CacheMode) { _cacheModeToReturn = session.CacheMode; _session.CacheMode = cacheMode.Value; } } public void Dispose() { if(_cacheModeToReturn.HasValue) _session.CacheMode = _cacheModeToReturn.Value; } } ``` So usage in code would be more concise: ```C# using(new SessionContext(Session, _cacheMode) ... ``` I think this class can also be made private in `QueryParameters` and exposed only via method. Something like: ```C# using(queryParams.FillSessionContext(session)) ``` So it can be extended easily with filling some other context fields if added. But not sure if it's really usefull.
Could this be added to Dialect itself? Eg `public virtual int? MaxNumberOfParameters {get;}`?
Simplify to `this._targetBinding?.SetValue(value)`
I think timezone should be the last condition, to avoid interfering with other pieces. Any special reason it comes before period?
All regex resources should be lowercase. Unless lowercase would introduce specific ambiguity in the regex usage case.
please remove the debug.log
nit: we don't need to know if it's a dict as part of the name.
Perhaps move this condition into `ShiftStreamToFileStreamIfNecessary` + do the same with the code in `Write` - keep the logic in one place
This was updated from Code => Uri in main so it may conflict, though I think this is fine
would it be better to use `ToLowerInvariant()` here?
Isn't this dead code?
This should be read from the YAML file.
There is a destination buffer overflow here if destination isn't large enough to fit the decoded source.
Can we just kill the `relativeUrl` variable and do `baseUri.MakeAppLocalPath(request.Url)` directly here? :smile:
It should be without underscore, I think
This should only happen once in initialization, can you move it out of this method?
Should be moved to the existing `OnDeserialized` method. This will remove the need for the next change.
Probably should be `,` instead of `+`
>CreateSearchParameterInfo [](start = 24, length = 25) nit: this reads like some kind of black magic. Can we rename to `GetOrCreateSearchParameterInfo` #Closed
C# 6 is not yet supported by our build engine, please change to using C#5
nit: sort using
> An <see cref="IRequestTrace"/> instance
nit: `FhirResponse<T> response = await action();`
What does this specific change represent?
"numberrange" should be constant
No need to specify "A-Z" as for perf pre-processing guarantees capital letters won't reach the regex.
If the class is already ResolutionKey, no need to repeat the suffix Key for every key. :)
This is pretty pointless if you're not going to add a summary...
nit: typo hasOffstring should be hasOffspring ```suggestion public const string HasOffspring = "hasOffspring"; ```
Timex should be part of it.
```suggestion var syncStatus = _dashBoard.GetAll().Where(summary => summary.Network.ShowSyncSummary) ```
Prefer expose interface rather than concrete types (both here and below).
> public const string IncludeAssociatedData = "includeAssociatedData"; [](start = 7, length = 69) I can't find any usage of this. #Closed
Please undo all these changes as they are white-space only.
we need to escape the quote inside the string?
```suggestion /// <summary> /// Create a cache lock provider. /// </summary> ICacheLock Create(); ```
Nancy code base prefers this.config to config
Why is this being reset here? Wouldn't this never work if there was a lag and say one entry was created before we reset it and the other 9 after?
nit: rename factory to pool like elsewhere in this PR.
Profile is not an `ICollection`. Perhaps just use your `ReferenceComponent` object
nit: this line can be merged with the previous line var requestBundle = Samples.GetJsonSample("Bundle-TransactionWithVersionSpecificReference").ToPoco<Bundle>();
`PopBackStackImmediateName` defaults to `""`. However, this doesn't prevent someone from passing null into it. I would probably add a null check here as well or use `string.IsNullOrEmpty()`.
Shouldn't `FieldInterceptionHelper.IsInstrumented(entity)` be changed for `Persister.IsInstrumented`?
It appears this will return a list of the names of the search params for the resource. I think we should return a collection of name:value pairs, so the user can see the search param and the value that it extracted from the resource. This will help determine if the new search param is defined correctly.
In SILVERLIGHT / __IOS__ / __ANDROID__ we have now the property `Encoding`, but it doesn't work. Do you think that's an improvement?
Why remove HalfYearRegex?
I think the name should be ReadInt16BigEndian as opposed to ReadBigEndian16. The former is better for intellisense completion, as you have to type less before you are down to one matching API.
Probably, we can get rid of extra if statement if (referenceInformation.versionId == versionId) { reference.Reference = $"{referenceInformation.resourceType}/{referenceInformation.resourceId}/_history/{referenceInformation.versionId}"; } else { reference.Reference = $"{referenceInformation.resourceType}/{referenceInformation.resourceId}"; }
Should be added to the end, otherwise the values will change.
Lets make this name the same as in the `IControlPlaneDataStore` since the rest match up between the two interfaces.
Maybe we should have two dense tensor subclasses: array backed and Memory backed. The array backed would be faster for indexing operations (as it does not have to fish out the span) and the Memory backed would allow the flexibility of overlaying native buffers at some performance cost related to fishing the span out of Memory.
probably we can create just guid here(var tag = Guid.NewGuid().ToString()) and move 'new Coding(string.Empty, tag);' into the method AddTagToResource()
Not sure why the additional threadpool bits are necessary? If you call listener.BeginGetContext straight after EndGetContext, then just run nancy, then that should handle multiple requests fine, without an unnecessary queueuserworkitem?
ExistsFileInProjectPath("Constants", "PageTokens.cs") should be ExistsFileInProjectPath("PageTokens.cs", "Constants")
Should this be static?
replace to StrictRelativeRegex
I don't think this is right. InternalServerError signals that this particular GetExport request has failed not that the job itself has failed. If the job is failed, it should still return 200 OK and the user can look at the OperationOutcome within the response to figure out what happened (or we can return some flag/status to indicate the result of the job).
Any particular reason we aren't using the `FhirClient` that's exposed test fixture?
I think there is a small typo here: ```suggestion public static Dictionary<int, string> GetEmptyDictionary() ```
These cases are also valid suffixes. Same for AM. Why the removal?
We should use `configurationBootstrapperType.AssemblyQualifiedName` as that's the same thing, but without the string concatenation. Could you update it please?
Do you find this really easier to read?
I think we need `#if !SILVERLIGHT` here and at the test.
Maybe complete by something like `and simplify .EntityMetamodel.BytecodeEnhancementMetadata external calls`.
nit: Perhaps we should rename StartAsync to EnsureInitialized?
i'd argue static helper class like 2 below
```suggestion // Network Server initially registers it's own handlers for these, so we replace them here. NetworkServer.ReplaceHandler<ReadyMessage>(OnServerReadyMessageInternal); ```
nit: same here, and possibly other places
I think this needs an "if (source.CanSeek)" round it.
Can you move this up in a using too?
Could this be an 'and' condition on the if statement above? #Closed
This references a SVG file, but you provided a PNG.
Inside `ReflectionBasedDriver` we use `ReflectHelper.TypeFromAssembly` which seems contain some additional logic. I think it should be used here too.
Please use assert.equal here
Can you replace all of the `if (LogFilter.Debug)` with `if (logger.LogEnabled()) `
Don't we already have something like it in Number? Basically it's a similar case to the year extraction from some PRs ago.
```suggestion int msgType = GetId(typeof(T).IsValueType ? typeof(T) : message.GetType()); ```
We should define the sort order as an enum (I know it's redundant but string is not friendly here). Eventually, i think the FHIR .NET library will have a base library that contains all "common" objects that would work across versions so we can switch to that later.
This likely doesn't need to be 20 strings long. You have some duplicate strings being tested, like "2", etc. I would remove (or change) any duplicates.
I think this would be better named as just `useSecureCookie`
this should be /target:library. /lib csc.exe option is to link additional libraries.
I'd expand the foreach into the while loop to make sure you are using `IEnumerable<XElement>.GetEnumerator()` and not `IEnumerable.GetEnumerator()`
Again, if you are exposing these for external usage outside the class scope, these should be modeled at read-only properties.
Please add some XMLdocs
nit: typo #Closed
Please declare such group names as constants.
These classes should be sealed. Based on conversations with @russellhadley, this will give JIT a better chance at de-virtualizing the calls.
nit: it think this reads better as `Gets the Coding collection` or `Gets the collection of Codings`
why are there two OnServerAuthenticate functions now?
Shouldn't a higher level of isolation be used here for count to be same as number of results?
```suggestion if (initialize && !identity.forceHidden) ```
So, the `//TODO: assumes all collections disassemble to an array!` has moved here indeed.
Look good, but I think a `[flags]` enum would be more future proof? Although i'm not sure if a flags-enum is working from the XML config. What do you think?
Ideally we should rename all these regexes to use complete names. No need for such abbreviations, which are also inconsistent with others.
Move this next to the other enabled ones
Are these right? Isn't it undoing something from the Spanish code?
What's this for? Is this commonly used?
Should be `ArgumentException`/`ArgumentNullException`
You should call Free in the OnRead callback
What is special about birth date?
It may be useful to also cover large struct with multiple fields.
```suggestion // Since IDENT node is not expected for implicit join path, we can throw on not found persister ```
I would recommend to: or use assert.areEquals, or write a helpers for this line.
the NET3_5 etc is defined already in the csproj for the .NET 3.5 platform. If you set it here, everything is defined as net3_5..
Test are named using the _Should_xxxxxx_ naming convention Also the tests are missing the `// Given` statements and could do with a line-break after the `// Then` statements
typo: 'a string'
>Contains [](start = 87, length = 8) nit: shouldn't this use StringComparison.Ordinal as in loop above? #Closed
This shouldn't actually be necessary and may break things - we're splitting the request path here, so it should just be splitting on '/'
```suggestion /// <summary> /// Obsolete: Use connectionToClient instead /// </summary> [Obsolete("Use connectionToClient instead")] ```
```suggestion return Regex.Replace(line, pattern, string.Empty, RegexOptions.IgnoreCase); ```
I'm not sure if this is how I would implement it. Isn't better to just rethrow the ex, and maybe add some context to the exception? e.g. ```c# catch (Exception ex) { ex.data["info"] = "FileStream Flush Failed: " + FileName; throw; } ```
Why we use SimpleCasesRegex in this case? Should we have one specific Regex for the pure number case?
Rename to ambiguousUnitNumbersRegex
I'm a bit confused by the Compressor and DefaultCompressor properties. Are both needed? Is this because of the `internal` implementation?
This should also be method call, no?
proposal: **always** add the exception to the end of the message. So no need to to pass exception twice (implicit and explicit). Need a lot of changes.
Make sceneMode optional, default to Single.
@martijn00 I'm not sure why we're keeping the object parameter and return type since this can be done by using MvxApplication<THint> with THint set to object
then why are we keeping it?
For future reference: this namespace can be removed
I think this and the one below should be 'or' cases for the original if statement sense they have the same body.
why remove this?
Wouldn't "more" and "less" be better?
Merge sequential checks ```suggestion if (firstPageRows?.Length > 1) ```
Missing space before the opening parenthesis.
this is better than using the scene index, because this works the same if scenes are reordered or not added to the list
Buffer.BlockCopy would be faster and easier to read :)
Could consider the include expression to be wildcard if `targetResourceType` is null?
Could you put this getter on one line? :smile:
Could you add a <remark> tag that explains why this is here or we'll just end up forgetting why and removing it 6 months from now =)
Can you explain what GroupSize means?
Did you mean `ItemSelected -= OnItemSelected`?
I really, really like how you've managed to use both a nullable reference type (strings) and a nullable value type (integer), and it makes perfect sense. My only concern is that there is just a single method for the student to work with, which means the student has to get it right completely. Do you think it would be possible to split this method into several methods? One option could be to have a separate method for just composing the name.
This should be an if-else so it's easier to read.
One for JobRecord, and another is for JobProgress, but what is the difference? Also in JobProgress: why one property is plural and other is singular? ``` [JsonProperty(JobRecordProperties.Filter)] public ExportJobFilter Filter { get; private set; } [JsonProperty(JobRecordProperties.FinishedFilters)] public bool FinishedFilters { get; private set; } ``` Can this properties be distinguished by more than just a plurality (not sure it's a right word, basically on attribute of how many) #Closed
```suggestion public virtual void ReadyStateChanged(bool oldReadyState, bool newReadyState) { } ``` adding a name for when this is overriden
You can change the project settings. To enable 7.2. I think the build agent should handle it.
In theory, a student could also solve this as follows, right? ```csharp public static bool DetectInvalidCharComination(string str) => str.Contains("->"); ``` One way we could maybe force students to work with chars is to do something like this, where the characters are provided as parameters: ```chars public static bool DetectInvalidCharComination(string str, char first, char second) ```
I think it needs to be aligned with others. Say 128.
nit: move `Validate` to a `const string`
I dont think we need `base.` here
We only want to mark the actual batch test with this category.
As you're touching this code, can we also try to refactor it so timex generation goes to a "centralized" module?
why not just remove the finally block entirely?
This mismatch shouldn't happen. A property called RelativeRegex should reference a regex called RelativeRegex, not StrictRelativeRegex. If we need StrictRelativeRegex, than the prop should be StrictRelativeRegex.
Instead of allocating a `new NdcLayoutRenderer` for every LogEvent. Could you put the `_ndcRenderer` as member-variable, or extract an internal shared method for rendering the NDC-string?
If I understand it right, this is to compensate some penalty from other scoring, right? If so, could it be relative to the relevant penalty, instead of a hardcoded value?
What's the purpose of this?
Isn't it quite expensive to check whether the file exists on every write?
Could do something like `_inner.Append(new String(' ', _indentLevel * 4);`
Remove the 'File' portion from all 4. That's implied.
why ratio instead of percentage delta? I think all of our other reporting tools typically report delta, not ratio.
Better to use `IsAssociationType` instead of casting for type check: ```C# if (type.IsAssociationType && visitor.SequenceSelectorExpressions.Contains(memberExpression)) ```
I doubt it serialize the dictionarry as you expect.
Could this list instead be in BasicNetManager so we dont need the static field?
Is this safe for all types? I think we should search for the proper ctor with reflection (and fallback to default ctor)
```suggestion Debug.LogWarning($"Closing connection: {networkMessage.conn.connectionId}. Received message {typeof(T)} that required authentication, but the user has not authenticated yet"); ```
The variable uv is unnecessary. Just access connectionToClient directly, it is inherited from NetworkBehaviour.
Can we change this to be a SkippableTheory and use the Skip.If call instead of just returning? It makes it easier to see when the test is actually running. There are some examples in CustomSearchParamTests.
```suggestion /// Render a UI for the lobby. Override to provide your on UI ```
Why isn't this on the FormsAuthenticationConfiguration?
do you plan to add more benchmarks to this category? If not, then we should rather not create a new one ```suggestion ```
It feels like better fix would be to replace `Synchronized` attributes with locking on field in `UpdateTimestampsCache` and move `spaces.Count` check inside.
Types and interfaces can also be filtered like: ``` bool IsGenerator(Type type) { return type.GetInterfaces().Any(x => x.IsGenericType && (x.GetGenericTypeDefinition() == typeof(ITableValuedParameterRowGenerator<,>) || x.GetGenericTypeDefinition() == typeof(IStoredProcedureTableValuedParametersGenerator<,>))); } serviceCollection.TypesInSameAssemblyAs<SqlServerFhirDataStore>() .Where(x => IsGenerator(x.Type)) .Singleton() .AsSelf() .AsImplementedInterfaces(); ```
use `environment.Json())` which uses the extension method
I think it's more accurate way is to check that `uk.SqlConstraintString(dialect)` returns not empty string before adding to `buf`
why HideInInspector? could be useful to assign directly in the inspector instead of with code
FYI We're adding a new enum `Special` for R4
don't we need a `lock` here?
Perhaps keep things together in the AnonymizerModule
I think it's wise to keep the behavior backwards-compatible (so `false` as default)
`ToArray` not needed
consider GUILayout instead of manual placing rects
You are opening a door to race-condition-hell by returning an unprotected dictionary. I recommend that you return `IReadOnlyDictionary` that only works on the platforms where it is known.
```suggestion private static readonly string MagnetUri = $"magnet:?xt=urn:btih:{KeyInfoHash}&tr=udp%3A%2F%2Ftracker.coppersurfer.tk" + "%3A6969%2Fannounce&tr=udp%3A%2F%2F9.rarbg.to%3A2920%2Fannounce&tr=udp%3" + "A%2F%2Ftracker.opentrackr.org%3A1337&tr=udp%3A%2F%2Ftracker.internetwar" + "riors.net%3A1337%2Fannounce&tr=udp%3A%2F%2Ftracker.leechers-paradise.or" + "g%3A6969%2Fannounce&tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969%2Fann" + "ounce&tr=udp%3A%2F%2Ftracker.pirateparty.gr%3A6969%2Fannounce&tr=udp%3A" + "%2F%2Ftracker.cyberia.is%3A6969%2Fannounce"; ``` Otherwise it names all magnet downloads `Carey M. Tribe of Hackers. Cybersecurity Advice...2019`
?. doesn't work for unity objects/components. this gives a warning in Rider at least. better to check != null first
This block can be simplified: ```csharp view.Enabled = _command?.CanExecute(null) ?? false; ```
GhostDoc again with "the" and an empty `<returns>` element
There are some issues with the existing audit event logging logic. For example, when a non-existing resource is read, it logs the resource type as OperationOutcome, which is incorrect. In the delete test below, it logs the resource type as null, which I think is incorrect as well. In both cases, we should log the actual resource type where the operation is being executed on, which is Patient in these two cases. I will file a separate issue to fix that.
I am wondering if instead of using this we should pass a path to a folder, and a Regex of all of the files to match of that type. I think I would prefer that to having magic that looks for certain values.
Instead of modifying the built corerun folder, should we create a temp folder, copy it there and modify it (not touch the actual product)? #Closed
I believe we decided to split these apart, yes?
nit: Method name missing the when part
Why? you can use `PaymentId.CryptoCode`.
What if that `as` check ends up returning `null`?
It would be best to declare a method to check for supported cultures, instead of just adding new ``f``` conditions.
did you try using 'Scene offlineScene'? Or do we absolutely need a custom attribute?
nit: Line break ```suggestion public event Action<TraceEvent> ContextSwitch { add { } remove { } } // not implemented public LinuxKernelParser(CtfTraceEventSource source) { parser = new LinuxKernelEventParser(source); } ```
What code-analysis tool where you using, that required this `SuppressMessage` ?
The size of the list that was being created is fixed. Can't you just use an array sized at run-time and do effectively the same test without having to run this 10 different times?
`cacheable` is called `reusable` above
```suggestion /// <returns>True if connection was successfully added for a connection.</returns> ```
This is racy and has the potential for conflict. The interlocked operation above could bring the ref count to a value above 0 (i.e. this code does not do the disposed) but by the time this line of code runs, someone else did bring it down to 0. Then, both callers get a result of true. If the one that didn't end up releasing it makes some decision based on the belief that they did (via the return value), that could cause an issue.
You can add it to a config class like EnglishNumberParserConfiguration.cs and here you can get from the config class. All expressions need to be defined in the source YAML files for that language.
Is this just using a dictionary for the key?
You can use `HashCode.Combine()`.
Given EncodingName is an enum, we are preventing 3rd parties implementing arbitrary encoders. I think we should file an issue to fix that.
Need to apply to all dialects
Why do we need timex generation code in multiple places? It should at least leverage the same timex generation code.
The fields are not static. Did you mean to make them static?
This is not the ideal place to add such terms. This is mixing the new terms that are not entities by themselves with modifiers that shouldn't be in this regex. For example, there is another definition that already contains synonyms for "around" that should also be supported, but are not enabled here.
We should handle the continuation token gathering in one place, with the above.
Dots should be escaped in the latter part of the regex.
We don't really use named parameters anywhere else in this section of the code
I think that condition here is wrong
this looks like its own breaking change, should we return default instead? or leave the new requirement for this class
Please change message to: > The image file is invalid. Please, select a jpg, jpeg, gif, png or tiff file
Since it uses system transaction, the fixture must be disabled if the environment does not support them. Add: ```c# protected override bool AppliesTo(ISessionFactoryImplementor factory) => factory.ConnectionProvider.Driver.SupportsSystemTransactions; ``` (Since currently this is false for all .Net Core / .Standard drivers, the private field fix is in fact not really needed, but it does not harm to have it.)
Should probably rename the "path" parameter to "url"
These properties shouldn't be added. They were refactored out to the various collection configs.
nit: could just use object initialization
This enumerator is never disposed. Shouldn't it be disposed when the channel is complete?
We didn't need this `_off` in Java, why here? It is both not great for performance (since `Position` is used a lot), and makes it harder to tell if this code is correct, i.e. if `_off` is taken into account in all the right places.
Is there some max number of conditions we need to check for?
The locking around length is inconsistent. In some cases you update it inside of _sync and in this case you're using an interlocked. Move this code lower into the lock.
Why is this an `MvxNotifyPropertyChanged`? I don't see `SetProperty` called anywhere and we don't want to bake `INotifyPropertyChanged` into any implementation of `IMvxNavigationService`.
> error CS0117: 'Library' does not contain a definition for '_brotliEncoder' [/mnt/j/workspace/dotnet_corefxlab/master/ubuntu16.04_release_prtest/src/System.IO.Compression.Brotli/System.IO.Compression.Brotli.csproj] You only changed Library.Windows.cs to _brotliEncoder/etc. Please also make the same change to: - Library.OSX.cs - Library.Unix.cs
Would be better to loop through the transports and return true if one of them is available
maybe this function should set networkmanager.address to uri.address in case someone access it later?
Should this check be done after subtracting start?
is this the most obvious name? what about startIfServerbuild or autoStartServerBuild (or keeping startOnheadless)?
This should also be a common method. When extracting it, please also define constants for '2' and '4'.
I think we can rename this attribute to AmbiguousUnitNumbersRegex and it's value should come from a method that combines AmbiguousUnitNumberMultiplierRegex and AmbiguousFractionRegex.
This feels like it should be in a constants file like the known parameters.
Using releaseLinkUri before testing for null? Should be moved inside the if.
should these be camel case? e.g. `_lastUpdated`
for cleanliness, could we use [Obsolete] instead of [System.Obsolete] please? we do this in the other places too :)
I also like 7, but where is this coming from? Is there a system const already defined somewhere?
Only for my understanding can you please explain where is this checking of forbidden is a part of bundle? Also where is this being used? I saw its being called from test only.
Need to check that DeclaringType is generic type
We don't want this to run on Mac?
This does not look like a very robust benchmark pattern. What does prevent the JIT from CSEing this whole thing in front of the loop?
Why is this removed?
This should be fixed, keep `FhirJsonParser(DefaultParserSettings.Settings)`
This seems like a bad name. Why switch from the one based on the template item name?
Please add some docs, most important is here that logging will be skipped if not enabled. (multiple times)
Seems like we can remove this and update the signature to `public void` ?
This looks a bit hackish. Why not using something like `$"Cannot simultaneously fetch multiple bags for query {ToString()}"`?
Please don't undo other people's changes unless they are part of the PR content.
Nit: If we're grouping, shouldn't "tot en met"also go into it in RangeConnectorRegex, like in TillRegex?
use () to properly do the ternary. (x == y) ? true : false;
```suggestion /// Assign control of an object to a client via the client's <see cref="NetworkConnection">NetworkConnection.</see> ```
Change this and line 30 to ConfigurationDataEliteTracker, then you shouldn't need the case in line 26.
"meio da madrugada" should also be handled in Portuguese.
This only takes one argument now
It's probably partly because it's late, but this boolean thingy right here is getting WAAAY too complex for my poor brain to parse. Think you could split it up into a couple of locals that has some good names? :smile:
Can you replace this with `#if !NETFRAMEWORK`?
There's not a huge need for a new variable here, especially since we're already transforming it below. We should be able to do something like the following instead. ```suggestion testEnvironmentFilePath = testEnvironmentFilePath.Replace('\\', Path.DirectorySeparatorChar); testEnvironmentFilePath = Path.GetFullPath(testEnvironmentFilePath); ``` Also, could probably just be done on one line, but readability may suffer.
>Format [](start = 22, length = 6) Is it worth to default to past behavior of `<resourcename>`? #WontFix
We should pass in `_exportJobConfiguration.MaximumNumberOfConcurrentJobsAllowed - runningTasks.Count` here. Else we can end up adding more number of jobs than the `MaximumNumberOfConcurrentJobsAllowed` number.
Why this MOD?
ToString() should also be culture-invariant.
Hah yes, this is a tricky one! I think an analyzer could be really useful here, as I also fail to see a way in which you can have this test and not give away the solution.
@neudurgeshp, Please be careful to not change the line endings of a file unless necessary. Can you revert this change and only push the conflict resolution? In this particular PR, it wouldn't be a huge issue, but avoiding such changes simplifies the whole review process.
This rename is actually a breaking change, isn't it?
Sentence has incorrect meaning as 'ago' is past and "I'll" is future. But this is a non-blocking issue as the unit test focuses only on the "two months ago" piece.
Can we have 0x10000 as a constant?
You might be able to just call `bool.TryParse` without the null check. If memory serves, it does a null check internally. Also, we can probably change the out parameter to be `out _` since we don't actually care about the return value.
Registration of the models can only happen once all tests pass, otherwise they are exposed to users. See TurkishNumberRange above as example.
```suggestion if (WasInitialized || !IsOperationQueueEnabled || !CanSkipElementExistenceCheck(o)) ```
>$ [](start = 47, length = 1) nit: no need for string interpolation since it's a constant string anyway.
i think you reversed the condition
> A <see cref="IRequestTracing"/> instance
Maybe add LoggingConfiguration as property to `IInternalLoggerContext`, and then extract the LogFactory from that? When InternalLogger-logging is improved with Nlog 5, then it will all work automagically.
Can we add here an "early exit" based on element counts? Or `requiredHqlParameters` can contain duplicates? Also it seems we already have a dictionary by name - `ParameterValuesByName`. So it's better to use it instead of creating additional temp Set class: `requiredHqlParameters.All(p => ParameterValuesByName.ContainsKey(p.Name))`
Can we maybe change this to BeginInvokeOnMainThread instead?
Can you share the perf impact of these regexes?
Do we need to validate embeddedResourceName? EnsureArg.IsNotNull(embeddedResourceName, nameof(embeddedResourceName )
This should not default true.
Why is this class needed?
I'm struggling to understand the setup here. BlockSetup creates the block, and then this Completion benchmark is going to be invoked a bunch of times, but all times other than the first, it'll already be complete. No? What is this measuring then?
Please also rename "consumed" to either "charactersConsumed" or "bytesConsumed" to make it clear.
Please change the LangMarker in the YAML file to "Jpn" and re-generate this file.
Replace with `return (extension != null) ? extension.Substring(1) : string.Empty;`
Did you mean `caller`?
I didn't look in to actual implementation but this change looks wrong. `IPropertyMapping` interface shouldn't depend on any query API (`ICriteria` in your case)
should we also add a line about converting exception?
Will this work if it is null? This looks like it would cause a null pointer exception. #Resolved
Should this file be part of the current change?
Would be nicer as a ternary?
`id` needs to be renamed to `idParameter` to match the `KnownRoutes.ExportJobLocation` template. Else the parameter value will be null
Should this be an option of the ExportJobConfiguration?
A better solution for perf would be to add the "weekend" term as an optional named group in HolidayRegex. This way the whole regex is only evaluated once, and a quick check for the group name in matches can be used to control code flow.
Add using to `System.Windows.Media` instead.
Are the canonical components case sensitive for the comparison? Should this be a case insensitive comparison?
Is it possible for `bytes + Index` to overflow?
Can you probably not change this method?
As a 1 line function, maybe this should be inlined?
Some formatting is lacking here.
What's the reason these are not tested with the "slow" encoders?
We have `LogEventInfo.CreateNullEvent()` for this :)
Should this go inside Initialize?
Rethrow for `MustBeRethrown()`-exceptions?
Should we not check for NetworkIdentity too?
Does this change the behavior in the case where we just don't support a search parameter? For example, if somebody were to send `Location?type1=test` would this return an error?
Why is this not an empty list? Won't it cause problems matching to whitespace in Korean?
Lacking spaces around `=>`. This may cause unrelated changes later on when working again on that code.
Will have to ensure that the default equality comparer does the right thing in this case (i.e. that it can handle differences in context names). I wonder, if the DefaultContextKey has been set above, and the value is not null, whether this will evaluate to true.
Noooo, this is the wrong fix. Change `GetLocalizationSafeMessage` to remove the "(Parameter" section of the string
nit: use a const for $edgeHub
This should be never null. The callers should use Length property instead.
>set { _flags = value ? (_flags | IsExtensionMethodBit) : (_flags & ~IsExtensionMethodBit); } [](start = 16, length = 92) Please remove the setter, this an immutable state of the symbol, it should not be mutated once accessed. #Closed
```suggestion /// <param name="bytes">The binary data to write as a Base64-encoded text.</param> ```
@sergey-shandar change `Category.Flaky` --> `Category.CheckIn`
I would keep the test code as short as possible, e.g. keep only what's needed.
Imho it would be good to have a `Desc` here clarifying that these are target types(?).
Is this property set to `true` anywhere?
I see where the confusion comes from. It's true that it's called "LastBlockHeight" but in fact this doesn't describe the last block height that was indeed received but rather the height of the block from which we want to sync. So imagine that you have 2 wallets, one synced up to block 500 and the other one up to block 800. Although the last block received is 800, we're going to behave as if the last block received is 500 because we need to sync from there. Does that make sense?
>directory?.Length != 0 [](start = 40, length = 22) We'll call `ResolveRelativePath(directory, baseDirectory)` if `directory == null` which seems surprising. Should this be: ``` string.IsNullOrEmpty(directory) ? baseDirectory : FileUtilities.ResolveRelativePath(directory, baseDirectory) ```
I believe you were refering to `-TemplateUri` because there's no templateLink term in PowerShell. ```suggestion [Parameter(Mandatory = false, HelpMessage = "The query string (for example, a SAS token) to be used with the TemplateUri parameter. Would be used in case of linkded templates")] ```
What does EditorFeatures.Wpf do for this?
```suggestion /// This is so that if there's a request for either of these ```
For these near one like #if statements it probably isn't worth using the more explicit `#if #endif #if` pattern.
flash should not have its own message, it should use a (preferably) state or a component message.
```suggestion internal sealed class PostInitOutputNode : IIncrementalGeneratorOutputNode ```
I think this task should implement `ITaskCallback` and `ShouldCreateOutputFile` return false, otherwise it will replace the files already exist on Windows (used as inputs) with empty ones.
Did you talk to Varun about adding ConfigureAwait(false)? Others look good to me.
this version also need to be updated
Do not use empty lines as they are discarded in XML, use `<para>` instead
Call new method "IsEnvDictionaryEqual" here.
Why is this necessary? If this is just a change in namespace, then there is no need for a breaking change entry. If there are changed properties, you need to describe them more thoroughly. This applies to all similar changes below.
Consider adding an assert instead of using a suppression.
should we not lock here as well even that its test?
why are we making those methods private?
Should not be needed
This should be an ext method, no need to add this method to this interface, it's also highly specialized so doesn't need to be this discoverable.
could you link the tracking item for the LSP based solution for these features here so we know when we no longer need this?
There's no guarantee that the bases will all be of type `MultipleMemberInfo`, or that a class named `Enum` is definitely `enum.Enum`. This may also affects constants that are used but not directly assigned in an enum. It's probably going to be better to add a built-in module wrapper (like in `LoadKnownTypesAsync` for `sys` and `typing`) and have special `Enum` and `IntEnum` base classes that can do the transformation there instead. That way we can also keep the value of the enum around, and should be able to properly retain the definition location (which I found myself really needing last week...)
```suggestion public readonly static object WorkingSetIncreaseLocker = new object(); ```
Catch particular exception; Add `<Throws` section to SaveBatchAsync with the exception being throws
> /// Represents in the [](start = 0, length = 25) Should it be "Represents the incoming..."? #Resolved
Maybe make this just fall through to the `default:` case below?
>_lazyGuardedSnapshotManager [](start = 47, length = 27) Why do we need to guard access to the ```SnapshotManager```? isn't it immutable? #Closed
Why concat cache here?
You don't need the while loop. If handled returns "true" then just call ContinueDialogAsync() from within the catch block. That way if another error occurs it will be throw out of OnTurnAsync().
This appears to discard diagnostics if there were only warnings.
should remove this in favor of just checking if `ActivationGas` is null
If `.FirstOrDefault` returns null, `.Tags` will throw NullRefException. I think that model should always have exactly one element here, if this is correct then use `Single` instead of `FirstOrDefault`
Don't need this constructor :)
TBD using EntityUid's here I don't envy you
why are we not doing this anymore? seems totaly reasonably if we were canceled.
Nit: unnecessary space between `isMars` and `:`
Consider dropping `ShouldErrorOut`, `WillErrorOut`, etc. from test method names, for consistency with other tests. #Resolved
You put the ' at the wrong place on this one (compared the your other advice). It's 'UserNotifications'.
Don't we need these channels anymore?
nitpick but this should be within the `av_` functions above.
Won't `[Route("unusedaddress")]` be a better name perhaps?
>Unreachable [](start = 46, length = 11) `UnexpectedValue(node.PatternSymbol)` ?
presumably we know this line will always succeed, since we're defining the Invoke method ourselves, so the nullness can be banged away, instead of asserted lower down.
Whay not register RPC and ask the DI for the controller, or just register to the controller to the DI and ask for it.
You also want to keep the old conditional. I.e. `if (MaximumUpdateHz > 0 && minimumFrameTime > 0)`.
Per the best practice, we should probably standardize on `seconds`?
```suggestion var jsInProcessObjectReference = new Mock<IJSInProcessObjectReference>(MockBehavior.Strict); jsRuntime.Setup(s => s.Invoke<IJSVoidResult>(method, args)).Returns(Mock.Of<IJSVoidResult>()); // Act jsInProcessObjectReference.Object.InvokeVoid(method, args); jsInProcessObjectReference.Verify(); ```
This should return Null as before
Why we don't need to call that before other usages of `ActiveTransactions.OldestTransaction` ?
this would now be `_definitionsWithoutReferences.Add(definitionItem.Id, definitionItem);`
@hovsepm I would not add this alias --webapp should work
I think yes, it's weird to be able to go one way but not the other. #Closed
The change to public doesn't appear to affect the effective visibility (the containing class is `internal`.) Is this intended to become public API eventually?
Is there a reason why we'd want IsEnabled() to return false in the case: SuppressGlobalActivityPropagation = true s_diagnosticsListener.IsEnabled() = true Prior to this change this state would have returned true, and I was thinking of the feature that it should enable the handler in at least all the cases where it was enabled before. Maybe that isn't the right mental model to have?
is `?? new List<IPEndPoint>();` still required?
object intializer? `new Binding { Source = ... }`
I would just call this property Host, so that we can hopefully then switch the type to use the generic IHost
`_window` can't be null, cause `SaveToFile` is added to `_window.SaveToFile` and this is the only way it can be called.
```suggestion /// <returns><see langword="true" /> if the object should be returned to the pool. <see langword="false" /> if it's not possible/desirable for the pool to keep the object.</returns> ```
I think the `AddVirtualMethodReference` calls became unnecessary after `WebAssemblyVTableSlotNode` got added. Maybe we can just delete them all? The way these dependencies should show up in the system is implicitly through the `WebAssemblyVTableSlotNode` - it will inject the dependency for us.
This namespace overlaps with "Attributes" since some things in there are also filters
Can we call the method in line 70 from here so we can remove the duplicated originalAudience assignment?
>process.StandardError.ReadToEnd() [](start = 43, length = 33) Move `process.StandardError.ReadToEnd()` out of the lock. #Resolved
Test ran in CI build. Why
>if (slotBuilder.Count > 0) [](start = 16, length = 26) Consider removing the check since it looks unnecessary.
Not a big deal but to me this is much easier to read ``` var vectors = new Dictionary<int, InventoryVector>(); ``` then this (the param 'vectors' is lost inside the line) ``` Dictionary<int, InventoryVector> vectors = new Dictionary<int, InventoryVector>(); ```
I think we should make all of the types in that assembly internal. It's all essentially a private API without any compatibility guarantees.
@johnpaulkee rather than using enums as the type of a parameter, we advise to use a string with the `PSArgumentCompleter` attribute -- this allows the API to updated with additional values and the user can immediately provide them to this cmdlet without having to wait for another version of the module to be released with the new value(s) added to the enum.
should not be ConfigureAwait(true)
Another case of needing prototype references for this to work.
What's the reason we pass `Logger` here instead of giving it own static instance?
As the method is `TypedContent`, could you update the xmldoc to use "content" instead of "medias"?
```suggestion /// description attribute. The default implementation of the <see cref="Description"/> ```
Same ```suggestion [Deprecated (PlatformName.iOS, 15, 0, message: "Use the non-Apple SDK relating to your account type instead.")] [Deprecated (PlatformName.MacOSX, 12, 0, message: "Use the non-Apple SDK relating to your account type instead.")] ```
Instead of maintaining another state inside SNIPacket, wouldn't it be better to tell the SNIHandle to Dispose the packet after SendAsync completes? You could put an optional parameter in handle.SendAsync(SNIPacket packet, bool disposePacket) and it can be set to true from this call. This way the packet doesn't need to maintain a state.
Can we do like... ``` Linux = DesktopGL, ``` It would then at least take the same path as the desktop GL code.
Usings are not needed.
```suggestion // Not networked to clients ```
Nit: `uncServerName` => `lpUNCServerName` to match the doc'd parameter name `sourceName` => `lpSourceName` to match the doc'd parameter name
nit ```suggestion if (TransportType == HttpTransportType.LongPolling && User?.Identity is WindowsIdentity) ```
>tupleElementEvaluated[i] = true; [](start = 20, length = 32) does this still serve a purpose now? (it seems to only be used in assertions) #Resolved
The hard-coded check for the random race isn't needed anymore. "Random" is a legit race in its own right now.
Adding an explicit static cctor adds overhead to other static accesses on the type. It'd be better to do this as: ```C# internal static readonly SocketAsyncContext Closed = CreateClosedContext(); private static SocketAsyncContext CreateClosedContext() { var closed = new SocketAsyncContext(new SafeSocketHandle()); closed.Close(); return closed; } ```
Wrap this in {}
let's add an `[Obsolete]` message (on macOS) so people won't think it should work *and* won't be surprised if the member is removed later (at `XAMCORE_4_0` time)
I believe that some versions of Code Analysis will show this as uninitialized. Initializing to 0 in this case does no harm, let's leave this, in general.
What are you disabling here? (per @daveta) (who can't type as quickly right now)
Please add this as well. ```powershell if (this.TargetListener != null) { this.TargetListenerID = this.TargetListener.Id; } if (!string.IsNullOrEmpty(this.TargetListenerID)) { redirectConfiguration.TargetListener = new PSResourceId(); redirectConfiguration.TargetListener.Id = this.TargetListenerID; } ```
Similar to above - could the method name give a hint on what invalid combination is?
```suggestion public CoreFormatterTestsBase(ITestOutputHelper output) => _output = output; ```
>The conversion and lambda body [](start = 12, length = 30) Is this accurate? Also, could this ever be an invalid expression? #Closed
IsShareable might be better. #Resolved
this seems will have merge conflict with @shyamnamboodiripad
Why not 14.5, 11.3 and 14.5?
Why not use Vector3.TransformNormal here too?
@rnikhilkumar see below, do not make this change
Here to ```suggestion Array.Empty<T>();; ```
Need description about duration
Why is this here?
@sergey-shandar I think we should call this something else that is easier for users to understand what it does - something like "SimpleParameterSet"
This wait for exit will deadlock if the process produces more stderr or stdout than the OS buffer can handle. Because you don't read the stderr/stdout the process can hang on a Console.WriteLine call waiting for the buffer to be read.
>IsLiteralDefaultOrTypelessNew [](start = 30, length = 29) what if the `right` is some other typeless epxression (`null`, a lambda, or a typeless tuple like `(null, null)`)? #Resolved
Is it required?
timer may be sus here, should get a 2nd opinion
Nit on formatting: usings should be sorted
I think you can revert all changes to this file now.
usage would be helpful since this is extremely simple arg parsing with no error checking.
The crayon is... empty?
```suggestion /// The .vb file created by the <see cref="VisualBasicNetCoreClassLibrary"/> template. ```
Should this be localized?
This need not be an async method, since the only time it awaits is at the very end... it can just `return pool.SendAsync(...)`. If this were publicly exposed, we'd want to catch any exceptions that could emerge and wrap them in a Task, but I assume everywhere this is already called from does that in one way or another, e.g. something awaiting this.
Remind me what makes the whole operation thread-safe with regards to race conditions that would cause an additional operation to be created after this call to CancelIoEx (in which case that additional operation wouldn't be canceled by this CancelIoEx and would remain blocked)? There's something somewhere that ensures that by the time we make this call, no additional operations can be created?
Delete the ref counting
Shouldn't this be called only in case the validation succeeded?
>valueTuple is object && [](start = 16, length = 23) Should this be `valueTuple is null ||` instead? #Closed
I think we should use `DateTime.UtcNow` ? Also it would be better to introduce variable before all of the loops and use one value
Option type is a struct that cannot be null. So this check is redundand
what are those ? debug code ?
looks like a candidate for `if (group is IEnumerable<ITestTask> enumerableGroup) {`
adding the updatesafter after the basecall which uses it. :sus: move it infront of the basecall
Why should this be nullable?
RemoveAt now that you have the index?
Weird. I feel like this was meant to be private, but wasn't. It'd be a breaking change to make it private. Should it be private? And if so, worth the break?
1. `=>` 2. This is now expensive. Can we call this GetProjects() ?
what about an `abstract` class with a non-abstract `Equals` method?
Title of the PR is "assets with no extension should be valid" but I don't see this change has anything to do with extension, probably I'm missing something?
```suggestion #if !NET5_0_OR_GREATER ```
Nit: While you're in this code making changes, consider renaming "otherSet" to just "other" for consistency. All of these other methods look like they just use "other".
`void EnsureDrawingContext(ref IDrawingContextImpl context);` might fit better.
Please revert these changes bc we have version controller do such version bump things.
0 is a valid amount. I'd change the message to `None of the federation members has collateral requirement configured`
Huh, I didn't know you use attributes like this. Is it new?
UnKnown is a single world. It should be cased as Unknown
No need for that- blocks can't be smaller than header size so in GetAverageBlockSizeBytes you can check average to be less or equal to 80. Also this change breaks 2 BP tests
Should these cases rather be handled in `FindJumpTargets` ? We will hit some of them there at least.
Not directly related to the implementation, but shouldn't this exception be mentioned also in the RSPEC ?
I think naming conventions say this should have an s_ prefix.
It's better to move assigning of variables to the constructor, it's more readable to be able to see all the starting values in there instead of searching for their declarations.
Please add an assert at the top that the lock is locked
that _hint_ to a `[DisableDefaultCtor]`, the fact that there's no setter seems to make it unusable if `init` was used (successfully). looks like we should have done the same on `PKSuicaPassProperties` :|
We've been pushing string interpolation whenever we see these statements. Can you change this to: ``` uniqueSsn = $"{ssn.Substring(0, 3)}--{ssn.Substring(3, 2)}--{ssn.SubString(5, 4)}; ```
doc suggest it's `float?` not `nfloat?` Not a big deal since it goes thru `NSNumber` but other API are also using `float`
nit: space before parens. I know it's Mono style :disappointed_relieved:
Looks like we lose the statusCode and any Exception it contains. Seems like that could be useful in helping someone track down why it failed? Is there any general support for logging already used in SqlClient? If so that could be used. Or maybe the exception could be propagated in some way.
For all cmdlets where you are adding a parameter set - you need to have a DefaultParameterSetName promprty in your Cmdlet attribute. And to avoid breaks, this should match the parameter set name containign the previous cmdlet parameters
you could save the list creation / adding here by using something like ... ``` var contentItem = await contentLocalizationManager.GetContentItemAsync(ctx.Source.LocalizationSet, culture); return contentItem != null ? new[] { contentItem } : Enumerble.Empty<ContentItem>(); ``` :)
I think you should move this to be around `_client.ConnectAsync`, instead. This can happen because the connection just broke, and we don't want to report server down for that.
should be: `topThreads, threadsInfo` ?
Let's extract this piece of code to a method. We have exactly the same a few lines code below.
why reset the position ? as the reader is not used before being disposed
i think many of these props are redundant
I think we should just move this check to AreSnippetsEnabled, that way it happens earlier and still covers all entry points
Remove the _loc Parameter from the Constructor
I would not necessarily say "underlaying storage" here, though practically it is storage but the cash coin view does not know the underline view is storage.
Is this sufficiently long? I could imagine in CI with lots of network traffic and congestion that DNS requests could take longer than this every now and then. I think we use 30 seconds in similar places elsewhere.
Are these lines necessary at all? null is the default value.
>Assert.Equal("I0<(System.Int32 notA, System.Int32 notB)>", [](start = 12, length = 58) It feels like we might want to get "I0<(System.Int32 a, System.Int32 b)>" here. #Closed
seems like a very odd way of making it not required. Can't you just use `serviceProvider.GetService` instead of `GetRequiredService`?
The response should be disposed
Is this whole change just to avoid the if at the end of the function and one extra addition? Is there a measurable cost to those? This transformation doesn't add a ton of complexity, but it does add some, which makes me hesitate if the reward can't be quantified.
:memo: The capture of `enclosingSymbol` means this method gets at least two new allocations.
I'd just use `File.WriteAllText(dstPath, "This is a test file content");` to have some content in it and you don't need to check if it exists.
Does this mean that we'll gradually need to fill in all of these or are they irrelevant for R2R? At the first glance there seems to be some overlap with my current efforts regarding the reverse token lookup vs. upfront registration of external ref tokens during resolution in JIT.
By removing this call at the beginning it is possible that when beginning the login call you will get a cached user object, which might not have been properly invalidated, thus allowing the user to be identified as a non-deleted user. I don't believe it would be safe to remove this call here? Can you confirm the validation that this did not cause issues?
It seems that a number of the callers of `EnsureSignature` assume that the call will exit with the various fields being properly set. Most notable `_lazyType`. The re-entrant nature of the method though indicates that this is not the case. For example if `EnsureSignature` calls `TypeWithAnnotations` then that call will possibly because the second call to `EnsureSignature` will be re-entrant and won't guarantee all of the values are set. How do we guard against this type of problem? I think it's the type of error that would pretty much always play out in single threaded scenarios (i.e. it's not a race). So exhaustive testing should be enough. Wanted to make sure you agreed with that assertion. #Resolved
Hmm.... I have a mixed feeling about this. One hand, you can just have the dict with key type `<System.Net.HttpStatusCode ,long>` or you could have `<int, long>`. Personally, I'd prefer to have `<System.Net.HttpStatusCode ,long>` as it carries out how to interpret the key through the code. I'll leave it up to you to decide.
Could you split this as follows: * `GetAndStoreTokens_DoesNotOverwriteCacheControlHeader` * `GetAndStoreTokens_OverwritesCacheControlHeader_IfNoStoreIsNotSet` * `GetAndStoreTokens_OverwritesCacheControlHeader_IfNoCacheIsNotSet` * `GetAndStoreTokens_DoesNotOverwritePragmaHeader` You could use a private method to share all of the boiler plate in `Arrange & Act`.
I do not think that this will work on CoreCLR
```suggestion "--helix-python-bin \"$HELIX_PYTHONPATH\" " + ```
Why do we need this check?
```suggestion ``` I accidentally left this in. Unless you now make use of the `testResistances` in a test somewhere, this can probably be deleted
```csharp // Load global .po file for the application from the localization folder ```
>catch [](start = 29, length = 5) nit: cache #Resolved
Should `_scope` be Disposed in this case? It's intiialized in the ctor?
do we know why we need to do this? I guess protocol changed and we need this for old client?
_currentChunkMemoryUpdated is always false by the end of this method. I'd do the following: - remove setting _currentChunkMemoryUpdated = false in WriteCurrentMemoryToPipeWriter() - set _currentChunkMemoryUpdated to false in WriteChunkAsync and FlushAsync
Better but still confusing, the _important_ (executable) AOT files are present - else the app would not work. `Aot files` -> `AOT data files` ? or maybe just `The directory {msymdir} containing the mono symbols could not be found.` ?
This should probably have a length limit imposed on it to prevent the user from inputting a giant string.
if you're disabling these, this shouild be [ActiveIssue] with an issue ID
Rather than adding another if statement, the condition should be added to the existing if statement if (enableAltF4 && e.key == OpenTK.Input.Key.F4 && keys.Contains.(Keys.LeftAlt))
This should also include the check that it uses by default. So we retry on all the other retryable exceptions.
This being specifically 3.5 makes me a bit nervous. Was it just never changed and usually overridden from project logic, so we never noticed?
Does this extra branch help things? Do you not have a _currentPosition in this case?
spelling error: "hte tooltip" => "the tooltip"
>, "InvalidOperationException", "I'm sorry dave" [](start = 108, length = 47) I'm not sure why non-developer version would have these as arguments.
This doesn't need to be an extension method, it can just be done in the driver. We just did it in autoroute, as there is shared validation between the handlers. Simple if it is kept together
>TODO [](start = 15, length = 4) Nit: TODO #Resolved
Is this correct for things like: ``` JSON { value: 123.000, } ``` Or is the value still a JsonNode here? (and not a floating-point or decimal)
Same here - helper validating argument name for public method...
It seems we would reach this line only the parameter is a params array and no value is provided, is that right?
It does not sound right to have `char` on the IL stack. Should `char` be converted to `int32` when it gets loaded onto the IL stack instead?
same thing - should be derived from AzureRMCmdlet
```csharp var cultureInfo = CultureInfo.GetCulture(culture); var settingsUrl = $"{_settings.ReCaptchaScriptUri}?hl={cultureInfo.TwoLetterISOLanguageName}"; ```
If the log level is verbose I think it's meaningless to support suppressing - so I think it should at least be informational (or warning) - let's discuss this later
I would change 'UseStrongCrypto' to be 'SCH_USE_STRONG_CRYPTO'. That is the real name of the SCHANNEL flag and matches the actual source code name `Interop.SspiCli.SCHANNEL_CRED.Flags.SCH_USE_STRONG_CRYPTO`
```suggestion // when we run it again, we get no output because the comparer has suppressed the modification ```
this should probably only happen if `!eventArgs.intentional` "dropping" items onto tables on purpose is fine I feel
Any reason, this cannot be a `IProperty`
Thoughts on this conventions? I think it's nice to be a bit more descriptive than just "`result`" and it makes it clear which parameters are inputs, and which are expected values. ```suggestion public void GetAttributeValue_ValidArgs_Correct(string input, string attribute, string? expectedResult) ```
```suggestion Logger.LogDebug("Found API endpoints in plugin {name}", type.Assembly.FullName); ```
Should we make FileShare explicit as well while we're changing this?
What's the difference between `Default` and `DirectIp`? Right now they seem to be the same
```suggestion if (condition.Operation is INegateOperator) ```
Please add a -PassThru parameter. When specified, this cmdlet will return "true" to indicate that the operation was successful, or "false" if it was unsuccessful. If not specified, nothing is returned by the cmdlet.
> // syntax check [](start = 58, length = 16) nit: unnecessary (syntax check unless specified otherwise) #Resolved
To my taste, it would be slightly simpler with `config.Properties.TryGetValue(FIRE_AND_FORGET_DELIVERY, out fireAndForgetDeliveryStr) && Boolean.Parse(fireAndForgetDeliveryStr);` but that's just an insignificant style preference.
Seems like alot of rinse repeat with the dispose pattern, could scope to method and inline.
Add docs (just copy them from somewhere else)
FYI, this code exists in several features. We should probably update it in all others as well. Ideally, they would share a single implementation for all of them to use.
Could you get away with not doing ToList?
There are many other pieces of text in an IActivity that need to be translated. Cards in particular have titles, buttons, subtitles, etc. If you look at the code I wrote you will see it translates all of them.
Why do you made a convert method? It already convert to string like "BluetoothLeAdvertisingPacket" without your convert method
>IsElementNameReserved [](start = 48, length = 21) Suggest rename to `IsTupleElementNameReserved`. You might consider moving these tuple-specific methods and factories to a static class `TupleTypeSymbol` for clarity. #Closed
You could just do this if all of these are in the `ServiceCollection`. No need for the property. ```suggestion serviceCollection.AddSingleton<MediaBrowser.MediaEncoding.Attachments.AttachmentExtractor>(); ```
If there's at least one more rule that will need this, I'd put it in the facade.
Why `CriticalHandle` rather than `SafeHandle`?
I've been thinking about it for a while, but I don't like using `MouseButton` here, as it's going to 100% result in a breaking change when this is changed. I suggest a separate `TouchSource` enum, with values matching the ones in `MouseButton`, which is to be passed into the `OnTouch` methods (in #3269).
Do you think it would make more sense, rather than making a new class, to use the existing functionality, just modifying it as necessary?
I think this description is not needed.
Why not `Identifier` as the base type?
nit: Not clear how error message "ClientGW activation IDs can only be created for system grains" relates to IsClient check?
```suggestion asyncResult.WaitHandle.WaitOne(TimeSpan.FromSeconds(10)); ``` I always prefer the explicit overload, so you don't have to remember units.
Do we need this import?
This is wrong. It _may_ work on a dictionary that is very small, but that is wrong. It certainly shouldn't be in the API
We don't need to include `of this <see cref="Viewport"/>` on every summary. Also the link is redundant as it is just linking to the same docs they are already reading.
I'm not sure how I feel about using conversion operator here. Feels like overloading the constructor (`new Result(expr)` and `new Result(type)`) would work fine and the logic would be more readable. #Closed
>typeInfo.Type [](start = 25, length = 13) Please use expectedType instead.
```suggestion url = string.Format(CultureInfo.InvariantCulture, GetMovieInfo3, id, TmdbUtils.ApiKey) + "&language=en"; ```
FYI, these are not backwards compatible changes. To change function parameters in an interface we need to add a new interface and retain support for the old one as well.
Hmm, it seems like you're making this mutable just so you can test what would happen for different values, but if the class is not supposed to have this value changed, I don't see a lot of value in that.
The "here" is troubling.. are there still other places where we don't use a prepared statement? Shouldn't they just all be upgraded just in case?
Are there any tests for when the timeout is really low, like 0, and the regex evaluation times out?
Consider renaming `syntaxKindsPatterns` to `expectedSyntaxKinds`.
Is the ternary redundant?
Removed EOL doesn't seem intentional
Need to add a warning here.
I don't think you have to specify `AggregateException` here.
why ? that's a breaking change to remove a setter
add more provider name specific logging to improve debugging experience. See #4032 as an example. And also this is what we did for legacy provider initialization logging too
This should be cached
>NamespaceAndChildren [](start = 62, length = 20) Consider using varied casings for "NamespaceAndChildren" #Resolved
Each call to RetryOnAllPlatforms is already doing 20 tries over a course of 2 seconds, so in the case where this is going to fail, that will end up taking ~100 seconds for the 51 retries at this level. Then on top of that the last retry is 30 seconds, and then this 100*tries in between is a total of another ~130 seconds. So this test may end up doing retries and waiting for over 4 minutes?
why was this needed?
Is this text correct? I see a `// 1` on a different line, and no corresponding error here. #Resolved
nit: preview features go at the top (see `IDS_FeatureMixedDeclarationsAndExpressionsInDeconstruction`). Yes, it'll like be a conflict, albeit simple to address. Then no PROTOTYPE marker is necessary #Closed
same, but maybe `Create*` to match existing API
no need to save async provider, it can be a local variable.
This is now doing additional attempted date parsing and object creation, If we support this we should avoid multiple DateTime.TryParse calls over the same content
You've already authorized the whole controller for content, media, members, why are you then re-authorizing this single endpoint to only be for content?
@hytao is this change needed? If this `PSDeliveryRuleCacheExpirationAction` type is exposed to the user in any way (_e.g._, as an output or parameter type), then this will be a breaking change as the `Parameters` property is no longer accessible by the user. #Resolved
nit: consider factoring out optionSet.GetOption
casing `RGB` to `Rgb`
```suggestion var ip = context.Connection.RemoteIpAddress ?? IPAddress.Loopback; ``` GetNormalizedRemoteIP converts IPAddress to string - which this method is converting back. The above is more optimium and will then use the IPAddress version of the IsInLocalNetwork.
The need for this is not clear.
>Supress [](start = 20, length = 7) `Suppress`
Undo this change... i'll figure out what is going on with the test.
Nit: Seems like it would be good to include a case like (3, 5) -- that is, more than one connection allowed but we exceed the limit.
Style: Brace on same line rather than next.
>WaitAndGetResult [](start = 134, length = 16) Can these be called off the UI thread? Here and below in this method
```suggestion [NotNullIfNotNull("path")] public static string? CombinePaths(string? root, string? path) ``` Believe this accurately captures the semantics of the method.
Nit: Maybe instead a name like SupportsLongMaxDateTime?
Deferred has two r's. (When you address PR feedback, please do it in a separate commit so I don't need to re-review 340 files again ;)
Given the use case & interpretation of value, would it make sense to future proof this by turning into an `enum` instead of using an `int` here?
Usage of the property should probably be thread safe
1. I guess we could use `Post` here to avoid an extra TCS per frame. 2. Would be good to cache `UpdateSceneIfNeeded` delegate so we don't spam with delegates and closures.
`StartNow` is not used anymore, change it to `Delay` and assign `FromSeconds(1)`
nit: I'd probably would have kept using the error code directly, but that's not crucial... Did you check we have existing tests for all the scenarios that are now using the two helper methods? #Resolved
I think that this needs to be public `set` for proper deserialization. Or a field.
Do we have any tests with fallback encoding?
This should likely be `Text` since `@await` is not an await token (whereas this check would match). But why not just a simple `IsKind` check? #Resolved
Looks like CoreCLR is not setting the name (it's just null). Seems unnecessary since there are properties to determine all of the information provided here.
we don't have any SonarWay rule which is parameterized?
`parenthesizedParameters` appears unused #Closed
@RandalliLama please revert the changes made to version numbers in this file
>_connection.Dispose(); [](start = 24, length = 22) _connection = null; #Resolved
Will this grow forever in SG scenarios where files are generated each time with new IDs?
Nit: I'd prefer if the flag is false by default, perhaps `useLoweredTree`?
>Assignement [](start = 45, length = 11) Typo
```suggestion _logger.LogInformation("Kestrel listening to unix socket {SocketPath}", socketPath); ```
Remaining TODO #Resolved
While I don't see any rules on this `<summary>` never really contains any other tags.
```suggestion serializer.DataReadFunction("validation", "^[a-zA-Z0-9 ]*$", value => _validation = new Regex("^[a-zA-Z0-9 ]*$", RegexOptions.Compiled)); ```
I'd move this if statement outside of the method, and rename it to `focusTopMost` or something like that. Will make reading the logic of `Update` much easier.
>expression trees or [](start = 57, length = 19) Cut off sentence? #Resolved
I think this was actually clearer before, even though it was more verbose.
@jptissot This works with PoExtractor, I tested.
Why the different casing on `SourceLink`? :(
VB tests should now just use multiline strings.
Thanks for adding these, but most of these don't actually have any whitespace in them. Is that intentional?
ConfirmImapct unnecessary without ShouldProcess support
use a Friend attribute
Do we want to make this configurable vs. hard coding a constant here?
I don't think the Translators user group should have this permission by default and the Sensitive data user group is only used as a marker/indicator, so shouldn't have it either: ```suggestion _database.Insert(Constants.DatabaseSchema.Tables.UserGroup, "id", false, new UserGroupDto { Id = 4, StartMediaId = -1, StartContentId = -1, Alias = Constants.Security.TranslatorGroupAlias, Name = "Translators", DefaultPermissions = "AF", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, Icon = "icon-globe" }); _database.Insert(Constants.DatabaseSchema.Tables.UserGroup, "id", false, new UserGroupDto { Id = 5, StartMediaId = -1, StartContentId = -1, Alias = Constants.Security.SensitiveDataGroupAlias, Name = "Sensitive data", DefaultPermissions = "", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, Icon = "icon-lock" }); ```
Why make a recursive call rather than loop? If this doesn't end up getting tail called by the JIT (I don't know if it will), seems like corner cases could end up resulting in a stack overflow.
What would happen if `RunForever` acquired & indefinitely held a lock which `OnDeactivateAsync` also required?
can you break into separate lines. i really dislike nested awaits in code.
I'm realizing this option controls more than just the role claims. It controls if the LdapConnection is even created, the event, etc.. ```suggestion if (Options.LdapOptions.EnableLdapClaimResolution) ```
No needed is inside a #if MONOMAC
Not sure why `constraintFailureDiagnosticsOpt` is passed explicitly. Seems like this constructor overload can be removed. #Resolved
remove as I don't know what it means :)
Can wen make some of those methods private now? #Resolved
Consider making `IOperation` implementations `sealed`. #Resolved
Some bikeshedding on the name. `CacheBuildResults` sounds a bit generic. When I initially read the name I thought the PR would be about not using a ResultsCache at all, as opposed to just clearing it on EndBuild. It also seems a bit weird for MSBuild to use the ResultsCache to cache build results during a build session, when `CacheBuildResults` is true. Maybe `ResetBuildResultsCache` instead?
Can you try something like `_matrixTransform.SetValue(_matrix.GetValueOrDefault() * _projection);` here and remove the tmp transformMatrix & projection? With the last PR I introduce the tmp `transformMatrix`. Multiply(ref,ref,out) was still faster, but now that `projection` has moved down here and it's uninitialized we might not have reason to still use the ref,ref,out.
should we check that number of entries in 0 here?
``` csharp /// The ModuleDesc that is returned will be cast to IAssemblyDesc and the GetName method is /// the only function that shall be used on this ModuleDesc. ``` These two lines feel like an unnecessary implementation detail that might become obsolete when we start emitting metadata for modules (and potentially, non-assembly modules).
Do we need to also push any nested types contained within the type?
Probably should be InvariantCultureIgnoreCase (which is available as StringExtensions.InvariantEquals)
let's create a constant to ease readability (and avoid unrequited extra instances), e.g. ``` // used when headers for a framework is not provided for the simulator static Version NotAvailableInSimulator = new Version (int.MaxValue, int.MaxValue); ```
Can you use Interop.PlatformDetection.cs instead? i.e. Interop.IsWindows?
I don't understand the meaning of the `Position.X > 0`. could you please explain?
`return new Dictionary<CPos, SubCell>() { { location, SubCell.FullCell } };`
Please use `_cachedStagingTexture`.
what ensures that this exists? for example, for F#/TS?
Don't we need to do the same work for properies that are `ref readonly` returning? #ByDesign
nit: with the new parameter, it would be good indent the ternary lines to make it a bit more readable. #Resolved
this feels wrong. if this is an Update call, then mi would expect to maintain the original class/struct mod, not blow it away. #Resolved
this is just text, have this in both anycode and roslyn. and make it internal.
nit: would just remove as it does nothing ```suggestion ```
This needs to be public so that downstreams can use it
don't move this
What does this "//" mean... is it a placeholder for something?
```suggestion mediaInfo = await JsonSerializer.DeserializeAsync<MediaInfo>(jsonStream, JsonDefaults.GetOptions(), cancellationToken).ConfigureAwait(false); ```
Could you unwrap this within JitInterface? The existence of `UnboxingMethodDesc` is private to the JitInterface - it should never escape it (plus it's nice for the other places that call this not to have to pay for the type check).
>AllInterfacesNoUseSiteDiagnostics [](start = 33, length = 33) I think this wouldn't be correct for classes. Let's try to come up with a scenario when we can observe a negative effect. I think we should reuse GetInterfacesToEmit method here. This is exactly what we are looking for - the set of types we are going to emit. #Closed
Have we tested thecase where appId ends up being null?
Should this be a `static` class?
`CryptographicOperations.ZeroMemory` if available?
We could name it `suppressHiddenArgument` or something like that to keep it short.
We avoid using inline out variables where their scope isn't clearly visible.
Can we remove this ctor?
Is this "using" necessary? #Closed
Same here --> `IsEmpty`.
Should this be plain `throw` without `e`?
this doesn't appear to be using any of the protected members of the base class. indeed, this type doesn't seem to have any useful logic/state in it at all. i'm not sure why it needs to exist.
We should change this ".Skip" calls etc to explicit indexing again, assuming that Children are no longer IEnumerable.
(nit) Can this get moved inside the `namespace` declaration, please?
same as before, this should return `instancetype` and called `FromData`
It is not method, so probably it does not "get" the size but it is the size.
should be `NSCopying` not `INSCopying`
The entity might not come from the repository, so lets be safe and skip non-existent values: ```suggestion if (contentType.HistoryCleanup != null) { xml.Add(SerializeCleanupPolicy(contentType.HistoryCleanup)); } ```
nit: formatting should have a space after `var`
```suggestion /// retained, when an instance is returned.</param> ```
Nit: enumName.IndexOf could be changed to enumName.Contains
This should be a HashSet instead, or does the order matter?
GetAppId() => GetInstanceID()
Just an observation - there is potential for a DoS vector here, as the entire block & all transactions are getting hashed before any rules get applied to it. Perhaps the risk is minor though, as ostensibly we will only request blocks for which we already have a valid header. @noescape00 what do you think?
It's better to put these strings in `Resources.Designer.cs`
Should be registered in a different startup, using `RequiresFeatures("OrchardCore.Deployment", "OrchardCore.Shortcodes.Templates")`
Was it previously possible for the user to input a negative value and not have an error thrown at runtime? I just want to make sure that any scripts will not be broken by this change.
not sure about this one. having the space between attributes looks odd to me. that said, seems like a not common case either.
This xmldoc isn't accurate.
Consider passing an `EmitContext` argument instead, for consistency with other `Cci` interface methods. #Resolved
tricky - because it might be needed for apps it looks iOS headers were not updated on purpose (at least it seems justifiable) as iOS 13.0 gets out before other OS (at least the GM was) and 13.1 might be out around the time others get released. ``` +@property(nonatomic, assign, readonly) CBManagerAuthorization authorization API_DEPRECATED_WITH_REPLACEMENT("CBManager.authorization", ios(13.0,13.1)); ``` ``` +@property(class, nonatomic, assign, readonly) CBManagerAuthorization authorization API_AVAILABLE(macos(10.15), ios(13.1), watchos(6.0), tvos(13.0)); ```
Same question; will stop asking about these.
Likewise, this would only exist internal to `TranslatableString`.
I'm pretty sure this isn't right ;) #Resolved
I'm not familiar enough with Span parsing API to suggest improvements here.
Also include ` info.AuthorizationFor` in the error
IIRC PopupSystem can be used for these?
`is ParameterSyntax param` and then you can say `return param.ExclamationToken.IsMissing`
Suggested changing PSArgumentException into AzPSArgumentException
`GC.WaitForPendingFinalizers` here And remove the delay
Shouldn't these strings be in the resources, use SR.*, etc?
Again, just a small note about the relation to the Umbraco.Code
>GetValueOrDefault(AnalyzerActions.Empty) [](start = 32, length = 40) Could just make this `?.` #Closed
Typo on Instance
Seems like we should check to make sure it is not null and maybe not empty. #Resolved
>else if (this.CurrentToken.Kind == SyntaxKind.ExclamationEqualsToken) [](start = 12, length = 69) From an offline discussion we've decided to treat `!=` as an error but interpreted semantically as a null-checking token followed by an optional value. The resulting ParameterSyntax instance would have a missing ExclamationToken, and an EqualsValueClause where the `!=` token is used as the EqualsToken. The error would be attached to the `!=` (that is, to the EqualsValueClause.Equals token). The reason for treating `!=` as an error rather than splitting the token into two is to avoid complexity with incremental parsing.
What is this about? If it is set to false, it will always be false. Thus, this never executes...
This doesn't look right. It looks like we could get here by typing: `int param![]` which doesn't make sense. I would say this should be in an `else` block in the `!= SyntaxKind.ArgListKeyword` case
This looks like a leftover from your other PR. Could you revert this?
At the risk of complicating the code, can this logic not go in to the method AddFee and in that method if falling in the condition `if (context.Recipients.Any(r => r.SubtractFeeFromAmount))` then apply this logic to the recipients already in the builder?
`EntitySystem` already has an `IEntityQuery EntityQuery` use that instead of `RadioQuery`.
This loop has quite a long read-after-write-dependency on `i`. Maybe it's better to write this as ```c# for (; i < textLength - 8; i += 8) { if (!IsCharacterAllowed(text[i]) || !IsCharacterAllowed(text[i + 1]) || !IsCharacterAllowed(text[i + 2]) || !IsCharacterAllowed(text[i + 3]) || !IsCharacterAllowed(text[i + 4]) || !IsCharacterAllowed(text[i + 5]) || !IsCharacterAllowed(text[i + 6]) || !IsCharacterAllowed(text[i + 7])) { goto Return; } } ``` Same for the 4-unrolled loop.
You can use `TryGetValue` instead to simplify this. Same below.
The old code would return `MacOSTextInput` regardless of the underlying window implementation type. Needs testing on macOS to ensure this doesn't break anything (which I cannot do).
Does LOOC need to be a fallback?
This logic is a little bit different right? `.Policy` is different stuff than `ComputePolicyAsync`
I would suggest to add the time type to the name `DefaultMaxTipAgeSeconds`
I suggest adding a using statement for `Microsoft.Xna.Framework.Content` to reduce these type name lengths.
This is wrong, leave the original as we need to be able to set duration on per rule basis
Could you clarify why we are ignoring use-site errors. Is it because they were already reported elsewhere? #Resolved
This should just be `(ushort)port`. It was already validated to be in range by ValidatePortNumber, and this Convert call just bloats things unnecessarily. Same for the rest of the Convert calls below: they should just be casts.
```suggestion public void RefOutSuppressionInference() ```
>Microsoft.CodeAnalysis.Symbols [](start = 6, length = 30) Is this change needed? #Resolved
was the ext removed between the versions or ?
Let's use something better here. This will generate a double. Either use a Guid or an incrementing number
isn't this kinda useless? as in cant you just use the serveruid on both, since we dont have a seperation rn. and wont this break with seperation anyways, so doing it like this in advance also doesnt make much sense
will probably need hub or provider name here as well (along with partition)
something is wonky here. the old logic was just busted. we should just remove that. And if something breaks it should then call a new method called `IsNameOfNamedArgument` we absolutely should not have both types of logic running together.
```suggestion SetHandle(IntPtr.Zero); return true; ``` This avoids IsInvalid reporting false, but IsClosed is true, so using the SafeHandle in a P/Invoke fails.
Why this rename? I don't see any value of args->arguments. 'args' is popular and everyone understands it.
Nit: Should we reset `_cancellationToken` too?
Assuming you've run the `AutoMapperTests` to make sure the correct ignore's are in place?
Will this change break customer's existing script?
:bulb: I'd like to see a third test that combines both cases: ``` [Attr1][Attr2] [Attr3][Attr4] int i; ```
Don't do this.. add a method to this class to log the event.
Nit: With Argument*Exceptions, Assert.Throws has overloads where the first parameter is the name of the parameter with which the exception is associated. It's good to pass that in as well so xunit validates it.
I think we should not use a fixed epsilon like this. It might be too large for specific applications. There are a lot of places where we could improve comparisons with an epsilon value. So please leave it out here, and we'll figure out if and how to properly deal with float comparisons and standardize them across the library if we do choose to handle them. I opened #7591 for discussion on this topic and wrote down my thoughts on it.
Inline `ExtensionClassTypeNoUseSiteDiagnostics` in `Debug.Assert` to avoid making the call in release builds.
Aren't there any properties we want to copy for this new scope?
This is the last thing to clean up or is this a test so it's fine?
You should verify that the `positions` array has at least `count` elements.
How are you deciding when to use Array.Clear vs CryptographicOperation.ZeroMemory?
I see this flip-flopping across multiple PRs. Does someone know where this comes from and what is the correct value moving forward?
Don't we also want to set "has source suppression" if there was a `SuppressMessage` attribute? (And what do we do if the `SuppressMessage` attribute is in the sidecar file (GlobalSuppressions.cs)?
Remove these lines?
I suggest to keep this one, even when not currently used. It was very useful during our Roslyn CFG investigation sprint (I didn't have to spent too much time figuring out how to do it). I used it a lot there.
Not sure we need a lot of docs here if the type is obsolete. We might just delete the type entirely in 5.0
Making this field readonly will give better performance because it'll enable JIT address-burning optimizations.
This shouldn't be needed.
what about not checking and send the delete? If not there I guess deletion is also a success without having to delete anything
This doesn't need to start as public API.
>false [](start = 63, length = 5) Consider using named argument. #Closed
i'd prefer to actually check for teh explicit case of a 'static local'.
These should never be transmitted, and hence shouldn't need the `[Immutable]` attribute
I think you can completely delete this whole method
You could walk through the method first, keeping a list of labels and using statements ordered by location. Then, walk through again checking each `goto` by binary-searching the using statements list for a location in-between.
>DiagnosticInfo diagnosticInfo; [](start = 12, length = 30) Please check if there were changes around this in features/UsedAssemblyReferences branch. If there were, please revert this refactoring. #Closed
Doesn't this feature need to be `EnabledByDefault` ? And then auto disable if there are no props to encrypt using a prerequirement ?
We'll also need something similar in the test runner interop module for the UI tests.
Move these down after GetPositionInSet, so as not to separate related methods.
Is this second request supposed to be here?
I think this `WhereNotNull` should not be needed, as Create would return Enumerable.Empty when no instruction was created
Nit: maybe: ```C# public bool ManualSettingsOnly => !AutoSettingsUsed && ManualSettingsUsed; ``` ?
Instead of removing this test, can we capture the new behavior? (Canceled OnNavigate invocations will result in a new render)
>conversion = Conversion.NoConversion; [](start = 20, length = 37) Are we testing this aspect? #Closed
just `true` not `"true"` then you can do `json.TryGet(nameof(TopologyChange), out bool supports)`
>protected virtual bool AllowRefOrOut => true; [](start = 8, length = 45) abstract please #Closed
why `field_pi` instead of `field_pi.Name` like the others ?
It's added by default. If not present it's because someone added `[DisableDefaultCtor]` (see above) and that's the line that should be removed. We'll need to `git blame` why this was added before merging.
```suggestion public ConditionalOuterLoopAttribute(string reason, Type calleeType, params string[] conditionMemberNames) ```
Can we handle this in `LocationToIndex` rather than here? I'd rather get a sensible return value for requesting the end of the line (I assume that's where the error is coming from - the `end - start` bit ought to be fine)
What's the purpose of the handle != -1 check? I'm wondering if it'd be safer to just always do the CompareExchange while also not making successful paths slower.
Maybe rename the variable to something else since we don't call `CodeBase` anymore ? I would suggest using `location`: ```suggestion string location = GetEntryAssemblyLocation(); ```
Use using statements instead
What do you think if this is marked so only 1 can spawn? ```suggestion [StatelessWorker(1)] ```
Interesting.. I would expect putting my cursor just before the disposable creation also offers me to wrap the declaration inside a using statement. Can we special case this to avoid a breaking change here?
This continues the tendancy for us to have tight coupling between features scattered all over the codebase. I very much do not like this.
> && !_methodBodyFactory.IsCodeCoverageDisabled [](start = 46, length = 46) It doesn't look like this is going to intercept all scenarios where we add instrumentation. For example, there is a code path in InstrumentReturnStatement that doesn't come through here. InstrumentSwitchWhenClauseConditionalGotoBody also does its own instrumentation. Etc. I think we should look for a good place where we can intercept all attempts to inject instrumentation in the way where we wouldn't have to keep checking per construct, in case new specialized instrumentation scenarios would come up in the future. #Closed
will this cast always succeed? If not, i'd prefer a check and exception thrown with a good message (like "this can only be called on a blah blah blah"). #ByDesign
If you need to wrap this so that this doesn't cause extra work if tracing isn't enabled, then wrap this in a if (WinHttpTraceHelper.IsEnabled) etc.
Could this throw with an invalid type?
minor: last `$` is unneeded
>LocalRewriter [](start = 61, length = 13) Ideally we shouldn't have references to `LocalRewriter` here.
```suggestion LoggerMessage.Define<string, Http3FrameType, long, long>(LogLevel.Trace, new EventId(47, "Http3FrameSending"), ``` We should do the same for Http2FrameSent.
The TODO is not relevant here and mentions v6
Consider using a conditional operator here.
maybe use `currentDisplay.RefreshRate` as the default value?
Is continuing silently here (in release) the right thing to do? What will be the customer result - a partial deserialization, without any notification?
`out unused` would feel better
There's really only one?
>localloc [](start = 32, length = 8) Consider using cref to ```ILOpCode.Localloc``` here and below. #Closed
Signature indicates this returns a null stream, not a null task.
```suggestion Loc.GetString(" This is {0}. {2:They} {2:are} {1} years old.", Name, Age, this); ``` Sex already shows in the character sprite so it shouldn't be declared like this tbh, the rest are things that you cant deduct by looking at the sprite so its fine
:bulb: This method is mixing the expected case with code for an impossible error condition. It would improve readability to extract a helper function to get a classification type, and include the fallback behavior there instead.  We have tests that are supposed to eliminate this case, but it sounds like something still failed.
Dislike this, but not sure how to fix
`UT*` constants are generally in another framework
This seems odd. We should just register on SyntaxKind.DeclarationExpression
The exception is already there in the caller, why not just pass it in?
Nit: multi-character string as first arg with no StringComparison specified.
should we have an analyzer for roslyn that warns when this is forgotten?
>importResolver [](start = 88, length = 14) why not make this parameter optional?
This is not needed and can be removed.
Where is this used? VS doesn't find me any invocation with the new argument.
I think I get what these are but maybe have an example? e.g. beakers, cans?
It's probably not worth changing, but with only 3 items in the collection, it might be just as fast to use a list and simply search for the ID you want, and then removing the oldest would simply be `RemoveAt(0)`. But this code isn't exactly complicated.. I just don't like math in any form :)
Please add underscores "_" between logical separations for example CheckBlocksAnnounced_AndQueueEmptiesOverTime
Is this overload really worth it?
If no TFM is provided and the runtime applies, this will return the "activeissue" trait and I don't believe we ignore that trait in all our scripts. Could we update the last yield return to return failing instead?
You can annotate `Connect` and `ConnectAsync` with `[MemberNotNull(nameof(_cache))]` to avoid the null forgiveness
Please do not skip a running test. Please fix any tests that need to be re-recorded, this is one mechanism we use to protect customers from breaking changes.
How does it behave after reloading the index?
The `Introduced` does not match the attributes above, just include `Deprecated`. Also please re-write the message to follow our conventions.
>false [](start = 42, length = 5) i'd make this a required parameter.
if there are no wallets, this will show the height of the chain, and the log will lead to confusion.
>string.Format(BlueprintConstants.SubscriptionScope, subscription) [](start = 92, length = 65) This sort of thing repeats a lot, so it probably should be a utility function somewhere. #Closed
Add actual data: string such as `"\0\0"` will be translated to `\u0000\u0000`, etc
@johnpaulkee we shouldn't need `SupportsShouldProcess` for a `Get` command
I'd call this `NullableMemberInfo`.
Since we now have context `AuditConfig`. Should we make these xml attributes less verbose? Eg: QueueName OverrideTimeToBeRecieved
The local variables here are for the same purpose as in Cross().
If the `value` checked for nullability in the first condition, I don't think that `entry.Value?.ToString()` check nullability again is required
I would call this `DisableTelemetry`
It would be nice to make the period configurable
EnsureCleanDirectories was ensuring that directories exist, right?
I'd probably just return a null here since you expecting null elsewhere when nothing is returned and never actually handling this exception
Could pass in options class rather than each specific option. Class didn't originally because it was written before we started using options.
It would also be clearer to use `@"\\"` in place of `"\\\\"` in this case.
Does the test framework default to latest language version?
+= is a little odd here, since changes to `value` will have no effect.
Here you are freeing something that was allocated from the pool?!
Why is this the right place to do this instead of within `VisitConversion`? VisitConversion has the operandType, it has the conversion, it can recreate the conversion from the argument state, etc. #Closed
Should this be 'Staked' instead of 'Mined'? I know they are used interchangeably but I like to think of Stake as POS and Mine as POW to keep things straight or does this identify POW blocks as well?
```suggestion comp.Window = new CharacterInterfaceComponent.CharacterWindow(comp.UIComponents) { MinSize = (545, 400); };. ``` If this works then this is how we usually do it.
Move unrelated edit to a new PR or just revert.
This looks identical to the Span one. Am I missing something? Come to think of it, a lot of these methods don't seem to talk about the sequence object, or call GetNextSpan, so they should be (seemingly) identical to the existing ones.
Nit: some of the files are missing ending newlines
nit: Formatting is different from below attribute (spaces between operands). Consider using interpolated strings (might not look very good though)
When looking at the parent expression, we should skip parenthesis, otherwise we will still have FP for unreachable code in this case: ``` if (unknown && (trueConstant)) // Noncompliant { } else { // Secondary is raised here for dead code, but it may not be depending on the unknown value } ```
Do we really need it? Can we just split this into 2 tests?
This is going to allocate a delegate for WriteAsync on each call; presumably that's not desirable. In which case you'd be better off not using a local function and instead just using a lambda: ```C# return CopyToAsyncCore(destination, (destination, memory, cancellationToken) => { FlushResult result = await destination.WriteAsync(memory, cancellationToken).ConfigureAwait(false); if (result.IsCanceled) { ThrowHelper.ThrowOperationCanceledException_FlushCanceled(); } }, cancellationToken); ```
Is there no overload here that takes in a `Span<byte>`? If that were to be the case, I would suggest doing a `stackalloc` to avoid the allocation.
Use Path.GetFileName instead
`AssertUtil.ContainsExactly(items)` here has the nice side-effect of showing what is in the collection when it does contain something.
```suggestion shapeList = shapeList.Where(x => x.ShapeType.Contains(options.Search, StringComparison.OrdinalIgnoreCase)).ToList(); ```
Why not cast?
This summary seems like an incorrect copy-paste from AccessTypes.AllowAll. ```suggestion /// <summary> /// Determines the base access behavior of all doors on the station. /// </summary> ```
>{ [](start = 12, length = 1) Could we do `if (HasNotnullConstraint) { return true; }`? #Resolved
We should use `context.Node.GetFirstNonParenthesizedParent()` instead, otherwise the rule will not trigger for such cases: `a = (a ?? b); `
Why do you catch the exception for this call but not the other? GetType (with throwOnError:false) should never leak an exception if it does, DNX, or a host has a bug.
This DTO is still public, can we also change it to internal?
Use `UserInterfaceSystem.TryOpen` here instead.
please dispose of this at the end ` this.ConnectionManager.Dispose();` and right after it dispose of `this.nodeSettings.LoggerFactory.Dispose()`
Is there a reason the implementation of `Bind` shouldn't be handling this? #Resolved
>pragma warning disable SA1625 [](start = 1, length = 30) Remove. #Resolved
Add the command here?
I'd just pick one magic string to make it easier to grep for. Honestly, make it _really_ magic -- have the property called TestWorkspaceFactory.NullPath, and then have the test do <%= TestWorkspaceFactory.NullPath %> in the XML literal.
Seems a bit heavy-handed. Why not (at least) allow digits?
There's a race condition here. Imagine there's one connection in the pool and it's stale. RemoveStalePools runs and removes it, then checks and sees that pools is empty, so it goes to stop the timer. At that same moment, another thread comes along, sees that the pool is empty, adds a connection, and changes the timer to fire. Now this thread continues running and stops the timer. We now then have connections but no timer running.
>_currentStatement = operation.DeclarationGroup; [](start = 12, length = 47) We probably should stick to the old behavior here, ```IUsingDeclarationOperation``` is at the statement position. #Closed
Should be ```<since_tizen>8</since_tizen>```.
looks like `actualCharRange` is not used ?
I thought we didn't even get to lowering if there are errors in initial binding. Am I missing something? #ByDesign
Why not dispose anymore?
@deveshguha please make both of these versions 0.1.0
Nit: to be consistent with the rest of the tests, this should be capitalized as `TextPresenter_Can_Contain_Null_With_Password_Char_Set` (as with the rest of the tests here).
Perhaps add Guards here?
Perhaps `elementVisitor` could be `Action<T>` with the `foreach` handled here.
>WindowsDesktopOnly [](start = 32, length = 18) consider adding a link or issue #Closed
>GetValueOrDefault(AnalyzerActions.Empty) [](start = 31, length = 40) IMO this would read cleaner as `?.` and `!= false` #Closed
I suspect you'll want to remove `|| EnableOpenAPI` from this condition, or there will be a blank line at the top of the template.
